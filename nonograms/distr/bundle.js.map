{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC9CoD;AACI;AACT;AACR;AACE;AACI;AACI;AACH;AACD;AACM;;AAEpC;AACf;AACA;AACA,kCAAkC,yDAAY;AAC9C,8BAA8B,qDAAQ;AACtC;AACA;;AAEA;AACA,2BAA2B,2DAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,sDAAS;AACxC,mCAAmC,0DAAa;AAChD,iCAAiC,wDAAW;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,wDAAM;AACV,IAAI,wDAAM;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,yDAAM;AACV,IAAI,wDAAM;AACV,IAAI,wDAAM;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,oDAAO;AAClB;AACA;AACA,WAAW,oDAAO;AAClB;AACA;AACA,WAAW,oDAAO;AAClB;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ,GAAG,iCAAiC,EAAE,iBAAiB;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wDAAW;AAC5C,IAAI,wDAAM;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA,iCAAiC,yDAAW;;AAE5C,IAAI,wDAAM;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;;AAEA;AACA,IAAI,wDAAM;AACV;;AAEA;AACA,IAAI,wDAAM;AACV,IAAI,wDAAM;AACV,IAAI,wDAAM;AACV;;AAEA;AACA;AACA,SAAS,uDAAU,CAAC;AACpB,iCAAiC,QAAQ,GAAG,MAAM;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,uDAAU,CAAC,gBAAgB,GAAG,GAAG,cAAc,GAAG,QAAQ;AACnE;;AAEA;AACA;AACA,SAAS,uDAAU,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D,OAAO;AACP;AACA;;AAEA;;AAEA;AACA,SAAS,uDAAU,CAAC;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChVO;AACP;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,aAAa,GAAG,UAAU;;;;;;;;;;;;;;;;;ACPZ;;AAEpC;AACP;AACA;;AAEA;;AAEA;A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AAC3D,SAAS;AACT;;AAEA,sBAAsB,0BAA0B;AAChD;AACA,cAAc,+DAAa,EAAE,+FAA+F;AAC5H,SAAS;AACT;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA,YAAY,+DAAa,EAAE,UAAU;AACrC;AACA,OAAO;AACP,sBAAsB,eAAe;AACrC;AACA,cAAc,+DAAa,EAAE,mGAAmG;AAChI,SAAS;AACT;AACA,sBAAsB,4BAA4B;AAClD;AACA,cAAc,+DAAa,EAAE,0CAA0C,EAAE,GAAG,EAAE,EAAE;AAChF,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,kBAAkB,oDAAO;AACzB;AACA;AACA;AACA,kBAAkB,oDAAO;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,oDAAO;AACzB,QAAQ;AACR;AACA,kBAAkB,oDAAO;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxQyC;AACU;;AAEpC,sBAAsB,oDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,wBAAwB,4BAA4B;AACpD,uBAAuB,8BAA8B,EAAE;AACvD,iBAAiB,oCAAoC;AACrD,iBAAiB;AACjB,yBAAyB,iCAAiC,EAAE;AAC5D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAyC;AACvD,eAAe,+CAA+C;AAC9D,YAAY,gDAAgD;AAC5D,kBAAkB,mDAAmD;AACrE,cAAc,qEAAqE;AACnF,YAAY,8HAA8H;AAC1I,oBAAoB,mGAAmG,YAAY,UAAU;AAC7I,iBAAiB,6CAA6C;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa,+DAAa;AAC1B,cAAc,+DAAa;AAC3B,WAAW,+DAAa;AACxB,kBAAkB,+DAAa;AAC/B,aAAa,+DAAa;AAC1B,WAAW,+DAAa;AACxB,mBAAmB,+DAAa;AAChC,gBAAgB,+DAAa;AAC7B,iBAAiB,+DAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5EyC;AACU;;AAEpC,sBAAsB,oDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,uBAAuB;AACpC,aAAa;AACb,kCAAkC,0CAA0C,iCAAiC,MAAM;AACnH;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,wBAAwB,8BAA8B;AACtD,uBAAuB;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","sources":["webpack://nanograms/./src/scss/main.scss","webpack://nanograms/./src/js/model/crossword.js","webpack://nanograms/./src/js/presenter/nanograms.js","webpack://nanograms/./src/js/utils/const.js","webpack://nanograms/./src/js/utils/render.js","webpack://nanograms/./src/js/view/abstract.js","webpack://nanograms/./src/js/view/chose.js","webpack://nanograms/./src/js/view/controls.js","webpack://nanograms/./src/js/view/crossword.js","webpack://nanograms/./src/js/view/end-game.js","webpack://nanograms/./src/js/view/gallery.js","webpack://nanograms/./src/js/view/main.js","webpack://nanograms/./src/js/view/results.js","webpack://nanograms/webpack/bootstrap","webpack://nanograms/webpack/runtime/define property getters","webpack://nanograms/webpack/runtime/hasOwnProperty shorthand","webpack://nanograms/webpack/runtime/make namespace object","webpack://nanograms/./src/js/app.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export default class Crossword {\n  constructor() {\n    this._crosswords = [];\n  }\n\n  setCrosswords(crosswords) {\n    this._crosswords = crosswords.slice();\n  }\n\n  getCrosswords() {\n    return this._crosswords;\n  }\n\n  getElementById(id) {\n    let index = 0;\n    let currentEl = this._crosswords[index];\n    while( currentEl.id !== id ) {\n      index += 1;\n      if(index > this._crosswords.length - 1) break\n      currentEl = this._crosswords[index];\n    }\n\n    return currentEl;\n  }\n\n  getRandomCrossword(current) {\n    let newCrossword = this._getNextCrossword();\n    while (current === newCrossword) {\n      newCrossword = this._getNextCrossword();\n    }\n    return newCrossword;\n  }\n\n  _getNextCrossword() {\n    return this._crosswords[Math.floor(Math.random() * this._crosswords.length)];\n  }\n\n  adaptToClient(crosswords) {\n    const adaptedQuestion = Object.assign({}, crosswords, {\n      id: crosswords.id,\n      name: crosswords.name,\n      level: Number(crosswords.level),\n      playTable: crosswords.playTable\n    });\n    return adaptedQuestion;\n  }\n}","import { render, remove } from \"../utils/render.js\";\nimport { COMMAND, STORE_NAME } from \"../utils/const.js\";\nimport ControlsView from \"../view/controls.js\";\nimport MainView from \"../view/main.js\";\nimport ChoseView from \"../view/chose.js\";\nimport ResultsView from \"../view/results.js\";\nimport CrosswordView from \"../view/crossword.js\";\nimport EndGameView from \"../view/end-game.js\";\nimport GalleryView from \"../view/gallery.js\";\nimport CrosswordModel from \"../model/crossword.js\";\n\nexport default class Nanograms {\n  constructor(gameContainer) {\n    this._gameContainer = gameContainer;\n    this._controlsComponent = new ControlsView();\n    this._mainComponent = new MainView();\n    \n  }\n\n  init(crosswords) {\n    this._crossModel = new CrosswordModel();\n    this._crossModel.setCrosswords(crosswords);\n    this._results = [];\n    this._isHaveSaveGame = false;\n    this._saveGame = {};\n    this._getResultFromStorage();\n    this._seInitSettings();\n    this._renderBase();\n    this._getRandomCrossword();\n    this._setAnswers();\n    this._startNewGame();\n    \n  }\n\n  _seInitSettings(){\n    this._timer = undefined;\n    this._seconds = 0;\n    this._isGameStarted = false;\n    this._isShowAnswers = false;\n    \n  }\n\n  _getRandomCrossword() {\n    this._currentCrossword = this._crossModel.getRandomCrossword();\n  }\n\n  _deepCopy(matrix) {\n    return matrix.map(row => row.map(cell => typeof cell === 'object' ? deepCopy(cell) : cell));\n  }\n  \n  _setAnswers(answers = undefined) {\n    if (answers)  this._answers = this._deepCopy(answers);\n    else this._answers = this._clearAnswers();\n  }\n\n  _startNewGame() {\n    \n    this._choseComponent = new ChoseView(this._currentCrossword);\n    this._crosswordComponent = new CrosswordView(this._currentCrossword);\n    this._resultsComponent = new ResultsView(this._results, this._crossModel.getCrosswords());\n    this._renderGame();\n  }\n\n  _renderBase() {\n    const onRefreshClick = () => {\n      this._answers = this._clearAnswers();\n      this._crosswordComponent.setClearCrossword();\n      this._isGameStarted = false;\n      this._isShowAnswers = false;\n      this._crosswordComponent.startGame();\n      this._resetTimer();\n    };\n\n    const onShowAnswersClick = () => {\n      this._answers = this._clearAnswers();\n      this._crosswordComponent.setAnswersCrossword(this._currentCrossword.playTable);\n      this._isGameStarted = false;\n      this._isShowAnswers = true;\n      this._crosswordComponent.stopGame();\n      this._resetTimer();\n    };\n\n    const onSaveClick = () => {\n      this._saveGameToStorage();\n    };\n    const onLoadClick = () => {\n      this._loadGame();\n    };\n\n    render(this._gameContainer, this._controlsComponent);\n    render(this._gameContainer, this._mainComponent);\n\n    this._controlsComponent.setRefreshClickHandler(onRefreshClick);\n    this._controlsComponent.setShowAnswersClickHandler(onShowAnswersClick);\n    this._controlsComponent.setSaveClickHandler(onSaveClick);\n    this._controlsComponent.setLoadClickHandler(onLoadClick);\n\n    this._getSaveFromStorage();\n  }\n\n  _renderGame() {\n    const onCellClick = (index, command) => {\n      if(!this._isShowAnswers) {\n        if(!this._isGameStarted) {\n          this._setGameStartSettings();\n        }\n        this._setNextGameStep(index, command);\n      }\n    };\n\n    const onRandomClick = () => {\n      this._resetTimer();\n      this._seInitSettings();\n      this._restartGame();\n    };\n\n    const onShowGalleryClick = () => {\n      this._showGallery();\n    }\n\n    render(this._mainComponent._elements.additional.section, this._choseComponent);\n    render(this._mainComponent._elements.additional.section, this._resultsComponent);\n    render(this._mainComponent._elements.table.crosswordWrap, this._crosswordComponent);\n    this._crosswordComponent.setCellClickHandler(onCellClick);\n    this._choseComponent.setRandomClickHandler(onRandomClick);\n    this._choseComponent.setShowGalleryClickHandler(onShowGalleryClick);\n  }\n\n  _setGameStartSettings() {\n    this._isGameStarted = true;\n    this._controlsComponent.setSaveEnabled();\n    this._startTimer();\n  }\n\n  _setNextGameStep(index, command) {\n    \n      this._setNewAnswer(index, command);\n      const audio = new Audio('./muz/click.mp3');\n      audio.play();\n  }\n\n  _setNewAnswer(index, command) {\n    \n    switch(command){\n      case COMMAND.FILL:\n        this._answers[index.i][index.j] = '1';\n        break;\n      case COMMAND.EMPTY:\n        this._answers[index.i][index.j] = '';\n        break;\n      case COMMAND.CROSS:\n        this._answers[index.i][index.j] = '0';\n        break;\n    }\n\n    if (this._isFinish()) this._showEndGameInformation();\n  }\n\n\n  _clearAnswers() {\n    return Array.from({ length: this._currentCrossword.playTable.length }, () => Array(this._currentCrossword.playTable.length).fill(''));\n  }\n  \n  _loadGame(){\n    if (this._isHaveSaveGame) {\n      this._destroyGameResult();\n      this._currentCrossword = this._saveGame['crossword'];\n      this._resetTimer();\n      this._isGameStarted = false;\n      this._isShowAnswers = false;\n      this._seconds = Number(this._saveGame['seconds']);\n      this._controlsComponent.updateTimerDisplay(this._seconds);\n      this._setAnswers(this._saveGame['answers']);\n      this._startNewGame();\n      this._crosswordComponent.setAnswersCrossword(this._answers);\n    }\n  }\n\n\n  _startTimer() {\n    if (!this._timer) {\n      this._timer = setInterval(() => {\n        if(!this._isGameStarted) this._resetTimer();\n        this._seconds += 1;\n        this._controlsComponent.updateTimerDisplay(this._seconds);\n      }, 1000);\n    }\n  }\n\n  _resetTimer() {\n    \n      clearInterval(this._timer);\n      this._timer = null;\n      this._seconds = 0;\n      this._controlsComponent.updateTimerDisplay(this._seconds);\n\n    \n  }\n\n  _isFinish() {\n    const answers = this._answers.map(row => row.map(cell => cell === '0' ? '' : cell));\n    const playTable = this._currentCrossword.playTable.map(row => row.map(cell => cell === '0' ? '' : cell));\n    return JSON.stringify(answers) === JSON.stringify(playTable);\n  }\n\n  _getTime(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return`${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  }\n\n  _showGallery() {\n    const onCloseClick = () => {\n      this._destroyGalleryModal();\n      // this._restartGame();\n    };\n    const onGameClick = (data) => {\n      this._destroyGalleryModal();\n      if (data) {\n        this._destroyGameResult();\n        this._currentCrossword = this._crossModel.getElementById(data);\n        this._setAnswers();\n        this._startNewGame();\n      }\n    };\n    this._galleryComponent = new GalleryView(this._crossModel.getCrosswords());\n    render(this._gameContainer, this._galleryComponent);\n    this._galleryComponent.setCloseClickHandler(onCloseClick);\n    this._galleryComponent.setGameClickHandler(onGameClick);\n  }\n\n  _showEndGameInformation() {\n    const finishTime = this._getTime(this._seconds);\n    this._isGameStarted = false;\n    this._resetTimer();\n\n    \n    this._results.reverse();\n    this._results.push({time: finishTime,\n    id: this._currentCrossword.id});\n    this._results.reverse();\n    this._results = this._results.slice(0, 5);\n    this._setResultToStorage();\n    \n\n    this._endGameComponent = new EndGameView(finishTime);\n\n    render(this._gameContainer, this._endGameComponent);\n\n    const onPlayAgainClick = () => {\n      this._destroyResultModal();\n      this._restartGame();\n    };\n\n    this._endGameComponent.setPlayAgainClickHandler(onPlayAgainClick);\n  }\n\n  _restartGame() {\n    this._destroyGameResult();\n    this._getRandomCrossword();\n    this._setAnswers();\n    this._startNewGame();\n  }\n\n  _destroyGalleryModal() {\n    remove(this._galleryComponent);\n  }\n\n  _destroyResultModal() {\n    remove(this._endGameComponent);\n  }\n\n  _destroyGameResult() {\n    remove(this._crosswordComponent);\n    remove(this._choseComponent);\n    remove(this._resultsComponent);\n  }\n\n  _setResultToStorage() {\n    window.localStorage.setItem(\n      `${STORE_NAME}-result-table`,\n      this._results.map(el => `${el.time}-${el.id}`),\n    );\n  }\n\n  _saveGameToStorage() {\n    const id = this._currentCrossword.id;\n    const answers = this._answers.join('-');\n\n    this._isHaveSaveGame = true;\n    this._controlsComponent.setLoadEnable();\n    this._saveGame['crossword'] = this._currentCrossword;\n    this._saveGame['seconds'] = this._seconds;\n    this._saveGame['answers'] = this._answers;\n\n    window.localStorage.setItem(\n      `${STORE_NAME}-save-game`, `${id}:${this._seconds}:${answers}`);\n  }\n\n  _getResultFromStorage() {\n    let resultsTable = window.localStorage.getItem(\n      `${STORE_NAME}-result-table`,\n    );\n    if (resultsTable) {\n      resultsTable = resultsTable.split(',');\n      resultsTable.forEach(element => {\n        const result = element.split('-');\n        this._results.push({time: result[0], id: result[1]});\n      });\n    }\n  }\n\n  _getSaveFromStorage() {\n\n    let saveGame = window.localStorage.getItem(\n      `${STORE_NAME}-save-game`,\n    );\n\n    if (saveGame) {\n      saveGame = saveGame.split(':');\n      if (saveGame.length) {\n        try{\n          this._isHaveSaveGame = true;\n          this._saveGame['crossword'] = this._crossModel.getElementById(saveGame[0]);\n          this._saveGame['seconds'] = saveGame[1];\n          const answers = saveGame[2].split('-');\n          this._saveGame['answers'] = answers.map(row => row.split(','));\n          this._controlsComponent.setLoadEnable();\n        } catch (e) {\n          console.log(\"We have some problems with your save game\");\n        }\n        \n      }\n      \n    }\n  }\n}","export const COMMAND = {\n  FILL: 'fill',\n  EMPTY: 'empty',\n  CROSS: 'cross'\n};\nconst STORE_PREFIX = `hangman`;\nconst STORE_VER = `v1`;\nexport const STORE_NAME = `${STORE_PREFIX}-${STORE_VER}`;","import Abstract from \"../view/abstract.js\";\n\nexport const render = (container, child) => {\n  const containerEl = getElement(container);\n  const childEl = getElement(child);\n\n  containerEl.append(childEl);\n\n  renderChild(childEl, getChild(child, childEl));\n};\n\nconst renderChild = (container, childList) => {\n  if (childList) {\n    childList.forEach((childItem) => {\n      if (Array.isArray(childItem.element)) {\n        childItem.element.forEach((el) => render(container, el));\n      } else render(container, childItem);\n    });\n  }\n};\n\nconst getElement = (container) => {\n  let element = container;\n  if (element._structure) element = element._structure;\n  while (element.element) {\n    element = element.element;\n  }\n  return element;\n};\n\nconst getChild = (node, element) => {\n  let currentNode = node._structure ? node._structure : node.element;\n  let child = node.child ? node.child : undefined;\n  if (!child && currentNode) {\n    while (currentNode.child) {\n      if (currentNode.element === element) {\n        child = currentNode.child;\n        break;\n      }\n      currentNode = currentNode.child;\n    }\n  }\n  return child;\n};\n\nexport const createElement = (properties) => {\n  const newElement = Object.assign(\n    document.createElement(properties.tag),\n    properties,\n  );\n\n  return newElement;\n};\n\nexport const remove = (component) => {\n  if (component === null) {\n    return;\n  }\n\n  if (!(component instanceof Abstract)) {\n    throw new Error(`Can remove only components`);\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};","export default class Abstract {\n  constructor() {\n    if (new.target === Abstract) {\n      throw new Error(`Can't instantiate Abstract, only concrete one.`);\n    }\n    this._structure = null;\n    this._callback = {};\n  }\n\n  getElement() {\n    return this._structure[\"element\"];\n  }\n\n  removeElement() {\n    this.element = null;\n  }\n}","import AbstractView from './abstract.js';\nimport { createElement } from '../utils/render.js';\n\nexport default class Chose extends AbstractView {\n  constructor(crossword) {\n    super();\n    this._crossword = crossword\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n    this._randomClickHandler = this._randomClickHandler.bind(this);\n    this._showGalleryClickHandler = this._showGalleryClickHandler.bind(this);\n  }\n  getStructure() {\n    return {\n      element: this._elements.choseWrap,\n      child: [\n        {element: this._elements.chose.wrap,\n        child: [\n          {element: this._elements.chose.imgWrap,\n            child: [{element: this._elements.chose.img}]},\n          {element: this._elements.chose.titleWrap,\n            child: [{element: this._elements.chose.title}]},\n          {element: this._elements.chose.level.wrap,\n            child: Array.from({ length: this._crossword.level }, (el, i) => this._elements.chose.level[`star${i + 1}`])},\n        ]},\n        {element: this._elements.random.a,\n          child: [{element: this._elements.random.img}]}\n        ]};\n  }\n\n  getElementProperties() {\n    return {\n      choseWrap: {\n        tag: 'div',\n        className: 'game__chose-wrapper'\n      },\n      chose: {\n        wrap: {tag: 'div', className: 'game__chose chose'},\n        imgWrap: {tag: 'div', className: 'chose__img-wrapper'},\n        img: {tag: 'img', className: 'chose__img', src: `./img/example/${this._crossword.img}.png`, alt: 'Chose the game', width: '40', height: '40'},\n        titleWrap: {tag: 'div', className: 'chose__title-wrapper'},\n        title: {tag: 'p', className: 'chose__title', textContent: `${this._crossword.name}`},\n        level: {\n          wrap: {tag: 'div', className: 'chose__level-wrapper'},\n          star: {tag: 'img', className: 'chose__level-img', src: './img/icons/level.png', alt: 'star level', width: '40', height: '40'}\n        }\n      },\n      random: {\n        a: {tag: 'a', className: 'game__random', href: ''},\n        img: {tag: 'img', className: 'game__random-img', src: './img/icons/random.png', alt: 'random game', width: '40', height: '40'},\n      }\n    };\n  }\n\n  generateNode() {\n    const node = {\n      choseWrap: createElement(this._tagsProperties.choseWrap),\n      chose: {\n        wrap: createElement(this._tagsProperties.chose.wrap),\n        imgWrap: createElement(this._tagsProperties.chose.imgWrap),\n        img: createElement(this._tagsProperties.chose.img),\n        titleWrap: createElement(this._tagsProperties.chose.titleWrap),\n        title: createElement(this._tagsProperties.chose.title),\n        level: {\n          wrap: createElement(this._tagsProperties.chose.level.wrap),\n        }\n      },\n      random: {\n        a: createElement(this._tagsProperties.random.a),\n        img: createElement(this._tagsProperties.random.img),\n      }\n    };\n  \n    for(let i = 1; i <= this._crossword.level; i+=1) {\n      node.chose.level[`star${i}`] = createElement(this._tagsProperties.chose.level.star);\n    }\n\n    return node;\n  }\n  _randomClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.randomClick();\n  }\n\n  _showGalleryClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.showGallery();\n  }\n\n  setRandomClickHandler(callback) {\n    this._callback.randomClick = callback;\n    this._elements.random.a.addEventListener(`click`, this._randomClickHandler);\n  }\n\n  setShowGalleryClickHandler(callback) {\n    this._callback.showGallery = callback;\n    this._elements.chose.wrap.addEventListener(`click`, this._showGalleryClickHandler);\n  }\n}","import AbstractView from './abstract.js';\nimport { createElement } from '../utils/render.js';\n\nexport default class Controls extends AbstractView {\n  constructor() {\n    super();\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n    this._refreshClickHandler = this._refreshClickHandler.bind(this);\n    this._showAnswersClickHandler = this._showAnswersClickHandler.bind(this);\n    this._saveClickHandler = this._saveClickHandler.bind(this);\n    this._loadClickHandler = this._loadClickHandler.bind(this);\n  }\n  getStructure() {\n    return {\n      element: this._elements.header,\n      child: [\n        {element: this._elements.h1},\n        {element: this._elements.options.wrap,\n        child:[\n          {element: this._elements.options.timer.wrap,\n          child: [\n            {element: this._elements.options.timer.imgWrap,\n            child: [\n              {element: this._elements.options.timer.img}\n            ]},\n            {element: this._elements.options.timer.timeWrap,\n            child: [\n              {element: this._elements.options.timer.time}\n            ]}\n          ]},\n          {element: this._elements.options.refresh.a,\n          child: [\n            {element: this._elements.options.refresh.img}\n          ]},\n          {element: this._elements.options.showAnswer.a,\n          child: [\n            {element: this._elements.options.showAnswer.img}\n          ]},\n          {element: this._elements.options.saveLoad.wrap,\n            child: [\n              {element: this._elements.options.saveLoad.save,\n                child: [{ element:this._elements.options.saveLoad.saveImg}]},\n              {element: this._elements.options.saveLoad.load,\n                child: [{element: this._elements.options.saveLoad.loadImg}]}\n              ]}\n        ]},\n        {element: this._elements.settings.wrap,\n        child: [\n          {element: this._elements.settings.sound.a,\n          child: [\n            {element: this._elements.settings.sound.img}\n          ]},\n          {element: this._elements.settings.theme.label,\n          child: [\n            {element: this._elements.settings.theme.input},\n            {element: this._elements.settings.theme.span},\n          ]}\n        ]},\n      ],\n    };\n  }\n  getElementProperties() {\n    return {\n      header: { tag: 'header', className: 'game__control control' },\n      h1: { tag: 'h1', textContent: 'Nanograms game', className: 'visually-hidden' },\n      options: {\n        wrap: { tag: 'div', className: 'control__options options' },\n        timer: {\n          wrap: { tag: 'div', className: 'options__timer timer' },\n          imgWrap: { tag: 'div', className: 'timer__img-wrapper' },\n          img: { tag: 'img', className: 'timer__img', src: './img/icons/timer.png', alt: 'timer', width: '40', height: '40' },\n          timeWrap: { tag: 'div', className: 'timer__time-wrapper' },\n          time: { tag: 'p', className: 'timer__time', textContent: '0:00' }\n        },\n        refresh: {\n          a: { tag: 'a', className: 'options__refresh', href: '' },\n          img: { tag: 'img', className: 'options__refresh-img', src: './img/icons/refresh.png', alt: 'refresh', width: '40', height: '40' }\n        },\n        showAnswer: {\n          a: { tag: 'a', className: 'options__show-answer', href: '' },\n          img: { tag: 'img', className: 'options__show-answer-img', src: './img/icons/show-answers.png', alt: 'show-answer', width: '40', height: '40' }\n        },\n        saveLoad: {\n          wrap: { tag: 'div', className: 'options__save-load' },\n          save: { tag: 'a', className: 'options__save disable', href: ''},\n          saveImg: { tag: 'img', className: 'options__save-img', src: './img/icons/save.png', alt: 'save game', width: '40', height: '40' },\n          load: { tag: 'a', className: 'options__load disable', href: ''},\n          loadImg: { tag: 'img', className: 'options__load-img', src: './img/icons/open.png', alt: 'load last game', width: '40', height: '40' },\n        },\n      },\n      settings: {\n        wrap: { tag: 'div', className: 'control__settings settings' },\n        sound: {\n          a: { tag: 'a', className: 'settings__sound', href: '' },\n          img: { tag: 'img', className: 'settings__sound-img', src: './img/icons/sounds.png', alt: 'sounds on/off', width: '40', height: '40' }\n        },\n        theme: {\n          label: { tag: 'label', id: 'switch-theme', className: 'settings__theme theme' },\n          input: { tag: 'input', className: 'theme__input', type: 'checkbox', id: 'slider' },\n          span: { tag: 'span', className: 'theme__slider round' }\n        }\n      }\n    }\n  }\n  generateNode() {\n    return {\n      header: createElement(this._tagsProperties.header),\n      h1: createElement(this._tagsProperties.h1),\n      options: {\n        wrap: createElement(this._tagsProperties.options.wrap),\n        timer: {\n          wrap: createElement(this._tagsProperties.options.timer.wrap),\n          imgWrap: createElement(this._tagsProperties.options.timer.imgWrap),\n          img: createElement(this._tagsProperties.options.timer.img),\n          timeWrap: createElement(this._tagsProperties.options.timer.timeWrap),\n          time: createElement(this._tagsProperties.options.timer.time),\n        },\n        refresh: {\n          a: createElement(this._tagsProperties.options.refresh.a),\n          img: createElement(this._tagsProperties.options.refresh.img),\n        },\n        showAnswer: {\n          a: createElement(this._tagsProperties.options.showAnswer.a),\n          img: createElement(this._tagsProperties.options.showAnswer.img),\n        },\n        saveLoad: {\n          wrap: createElement(this._tagsProperties.options.saveLoad.wrap),\n          save: createElement(this._tagsProperties.options.saveLoad.save),\n          saveImg: createElement(this._tagsProperties.options.saveLoad.saveImg),\n          load: createElement(this._tagsProperties.options.saveLoad.load),\n          loadImg: createElement(this._tagsProperties.options.saveLoad.loadImg),\n        },\n      },\n      settings: {\n        wrap: createElement(this._tagsProperties.settings.wrap),\n        sound: {\n          a: createElement(this._tagsProperties.settings.sound.a),\n          img: createElement(this._tagsProperties.settings.sound.img),\n        },\n        theme: {\n          label: createElement(this._tagsProperties.settings.theme.label),\n          input: createElement(this._tagsProperties.settings.theme.input),\n          span: createElement(this._tagsProperties.settings.theme.span)\n        }\n      }\n    };\n  }\n\n  updateTimerDisplay(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    this._elements.options.timer.time.textContent = `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  }\n\n  setSaveEnabled(){\n    this._elements.options.saveLoad.save.classList.remove('disable');\n  }\n  setLoadEnable() {\n    this._elements.options.saveLoad.load.classList.remove('disable');\n  }\n\n  _refreshClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.refreshClick();\n  }\n\n  _showAnswersClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.showAnswers();\n  }\n\n  _saveClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.saveClick();\n  }\n  _loadClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.loveClick();\n  }\n\n  setRefreshClickHandler(callback) {\n    this._callback.refreshClick = callback;\n    this._elements.options.refresh.a.addEventListener(`click`, this._refreshClickHandler);\n  }\n\n  setShowAnswersClickHandler(callback) {\n    this._callback.showAnswers = callback;\n    this._elements.options.showAnswer.a.addEventListener(`click`, this._showAnswersClickHandler);\n  }\n\n  setSaveClickHandler(callback) {\n    this._callback.saveClick = callback;\n    this._elements.options.saveLoad.save.addEventListener(`click`, this._saveClickHandler);\n  }\n\n  setLoadClickHandler(callback) {\n    this._callback.loveClick = callback;\n    this._elements.options.saveLoad.load.addEventListener(`click`, this._loadClickHandler);\n  }\n}","import AbstractView from './abstract.js';\nimport { createElement } from '../utils/render.js';\nimport { COMMAND } from '../utils/const.js';\n\nexport default class Crossword extends AbstractView {\n  constructor(crossword) {\n    super();\n    this._crossword = crossword.playTable;\n    this._isGameStop = false;\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n    this._cellClickHandler = this._cellClickHandler.bind(this);\n    this._cellClickContextHandler = this._cellClickContextHandler.bind(this);\n  }\n  getStructure() {\n    const node = {\n      element: this._elements.table,\n      child: []};\n    \n    this._elements.rows.forEach(rowEl => {\n      const tdCells = [];\n      rowEl.cells.forEach(cellEl => {\n        tdCells.push({element: cellEl.td});\n      });\n\n      node.child.push({\n        element: rowEl.tr,\n        child: tdCells\n      });\n      \n    })\n    \n    return node;\n  }\n\n  generateNode() {\n    const hint = this.generateHint(this._crossword);\n\n    const node = {\n      table: createElement({tag: 'table', className: 'game__crossword crossword'}),\n      rows: []\n    }\n\n    for (let i = 0; i < hint.maxV; i += 1) {\n      node.rows.push({\n        tr: createElement({tag: 'tr', className: 'row'}),\n        cells: []\n      });\n\n      for (let j = 0; j < hint.maxH; j += 1) {\n        node.rows[i].cells.push({\n          td: createElement({tag: 'td', className: 'empty'})\n        })\n      }\n\n      for (let j = 0; j < hint.vertical.length; j += 1) {\n        node.rows[i].cells.push({\n          td: createElement({tag: 'td', className: 'cell hint', textContent: hint.vertical[j][i] ? hint.vertical[j][i] : ''})\n        })\n      }\n    }\n\n    for(let i = 0; i < this._crossword.length; i += 1) {\n      node.rows.push({\n        tr: createElement({tag: 'tr'}),\n        cells: []\n      });\n      for (let j = 0; j < hint.maxH; j += 1) {\n        node.rows[i + hint.maxV].cells.push({\n          td: createElement({tag: 'td', className: 'cell hint', textContent: hint.horizontal[i][j] ? hint.horizontal[i][j] : ''})\n        })\n      }\n      for (let j = 0; j < this._crossword.length; j += 1) {\n        node.rows[i + hint.maxV].cells.push({\n          td: createElement({tag: 'td', className: `cell`, data: `el-${i}-${j}`})\n        })\n      }\n    }\n\n    return node;\n\n  }\n  \n  generateHint(crossword) {\n    const rows = crossword.length;\n    const cols = crossword[0].length;\n\n    const horizontal = [];\n    const vertical = [];\n\n    for (let i = 0; i < rows; i += 1) {\n      let consistency = 0;\n      const rowHints = [];\n      for(let j = 0; j < cols; j += 1) {\n        if(crossword[i][j] === \"1\") consistency += 1;\n        if(crossword[i][j] === \"0\" && consistency > 0) {\n          rowHints.push(consistency);\n          consistency = 0;\n        }\n      }\n      if(consistency > 0) {\n        rowHints.push(consistency);\n      }\n      horizontal.push(rowHints);\n    }\n\n    for (let j = 0; j < cols; j += 1) {\n      let consistency = 0;\n      const colHints = [];\n  \n      for (let i = 0; i < rows; i += 1) {\n        if (crossword[i][j] === \"1\") {\n          consistency += 1;\n        } else if (consistency > 0) {\n          colHints.push(consistency);\n          consistency = 0;\n        }\n      }\n  \n      if (consistency > 0) {\n        colHints.push(consistency);\n      }\n  \n      vertical.push(colHints);\n    }\n\n    const maxHorizontalLength = horizontal.reduce((max, row) => {\n      return Math.max(max, row.length);\n    }, 0);\n    const maxVerticalLength = vertical.reduce((max, col) => {\n      return Math.max(max, col.length);\n    }, 0);\n\n    const alignedHorizontalHints = horizontal.map(row => {\n      const emptyEl = Array(maxHorizontalLength - row.length).fill(0);\n      return emptyEl.concat(row);\n    });\n\n    const alignedVerticalHints = vertical.map(cell => {\n      const emptyEl = Array(maxVerticalLength - cell.length).fill(0);\n      return emptyEl.concat(cell);\n    });\n\n    return {\n      maxH: maxHorizontalLength,\n      maxV: maxVerticalLength,\n      horizontal: alignedHorizontalHints,\n      vertical: alignedVerticalHints,\n    }\n  }\n\n  _cellClickHandler(evt) {\n    if (this._isGameStop) {\n      return;\n    }\n    if (!evt.target.classList.contains(\"cell\")) {\n      return;\n    }\n    if (evt.target.classList.contains(\"hint\")) {\n      if (evt.target.classList.contains(\"hint--off\")) evt.target.classList.remove(\"hint--off\");\n      else evt.target.classList.add(\"hint--off\")\n    } else {\n      let command = '';\n      if (evt.target.classList.contains(\"cross\")) evt.target.classList.remove(\"cross\");\n      if (evt.target.classList.contains(\"fill\")) {\n        evt.target.classList.remove(\"fill\");\n        command = COMMAND.EMPTY;\n      }\n      else {\n        evt.target.classList.add(\"fill\");\n        command = COMMAND.FILL;\n      }\n\n      const indexEl = this._getIndex(evt.target.data);\n      this._callback.cellClick(indexEl, command);\n    }\n\n    evt.preventDefault();\n    \n  }\n\n  _cellClickContextHandler(evt) {\n    if (this._isGameStop) {\n      return;\n    }\n    evt.preventDefault();\n    if (!evt.target.classList.contains(\"cell\")) {\n      return;\n    }\n    if (!evt.target.classList.contains(\"hint\")) {\n      if (evt.target.classList.contains(\"fill\")) evt.target.classList.remove(\"fill\");\n\n      let command = '';\n      if (evt.target.classList.contains(\"cross\")) {\n        evt.target.classList.remove(\"cross\");\n        command = COMMAND.EMPTY\n      } else {\n        evt.target.classList.add(\"cross\");\n        command = COMMAND.CROSS;\n      }\n\n      const indexEl = this._getIndex(evt.target.data);\n      this._callback.cellClick(indexEl, command);\n    }\n  }\n\n  _getIndex(data) {\n    const indexArr = data.split('-');\n    const index = {\n      i: indexArr[1],\n      j: indexArr[2]\n    }\n    return index;\n  }\n\n  stopGame() {\n    this._isGameStop = true;\n  }\n  startGame() {\n    this._isGameStop = false;\n  }\n\n  loadGame(crossword, answers){\n    this._crossword = crossword.playTable;\n    this.setAnswersCrossword(answers);\n\n  }\n  setClearCrossword() {\n    this._elements.rows.forEach((row) => {\n      row.cells.forEach((cell) => {\n        cell.td.classList.remove('fill', 'cross', 'hint--off')\n      })\n    })\n  }\n\n  setAnswersCrossword(answer) {\n    this._elements.rows.forEach((row) => {\n      row.cells.forEach((cell) => {\n        cell.td.classList.remove('fill', 'cross', 'hint--off')\n        if(!(cell.td.classList.contains('empty') || cell.td.classList.contains('hint'))) {\n          const index = this._getIndex(cell.td.data);\n          switch (answer[index.i][index.j]){\n            case '1':\n              cell.td.classList.add(\"fill\");\n              break;\n            case '0':\n              cell.td.classList.add(\"cross\");\n              break;\n            }\n          // if (answer[index.i][index.j] === '1') cell.td.classList.add(\"fill\");\n        }\n      })\n    })\n  }\n\n  setCellClickHandler(callback) {\n    this._callback.cellClick = callback;\n    this.getElement().addEventListener(`click`, this._cellClickHandler);\n    this.getElement().addEventListener(`contextmenu`, this._cellClickContextHandler);\n  }\n\n  deleteCellClickHandler() {\n    this.getElement().removeEventListener(`click`, this._cellClickHandler);\n  }\n}","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class EndGame extends AbstractView {\n  constructor(time) {\n    super();\n    this._time = time;\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n    this._playAgainClickHandler = this._playAgainClickHandler.bind(this);\n  }\n\n  getStructure() {\n    return {\n      element: this._elements.aside,\n      child: [\n        {\n          element: this._elements.window,\n          child: [\n            {\n              element: this._elements.div,\n              child: \n                [{element: this._elements.titleWrap,\n                    child: \n                      [{element: this._elements.img},\n                      {element: this._elements.title}]},\n                {element: this._elements.information},\n                {element: this._elements.closeBtn,\n                child: [{element: this._elements.closeImg}]},\n              ],\n            },\n          ]\n        }\n      ],\n    };\n  }\n  getElementProperties() {\n    return {\n      aside: {tag: \"aside\", className: \"modal-results\"},\n      window: {tag: \"div\", className: \"modal-results__window\"},\n      div: {tag: \"div\", className: \"modal-results__wrapper\"},\n      titleWrap: {tag: \"div\", className: \"modal-results__title-wrap\"},\n      title: {tag: \"h2\", className: \"modal-results__title\", textContent: `Great! `},\n      img: {tag: 'img', className: 'modal-results__img', src: './img/icons/results.png', alt: `Winner's medal`, width: '40', height: '40'},\n      information: {tag: \"p\", className: \"modal-results__information\",textContent: `You have solved the nanograms in ${this._time} seconds!`},\n      closeBtn: {tag: \"a\", className: \"modal-results__button\"},\n      closeImg: {tag: 'img', className: 'modal-results__button-img', src: './img/icons/win.png', alt: 'Close window', width: '40', height: '40'}\n    }\n  }\n  generateNode() {\n    return {\n      aside: createElement(this._tagsProperties.aside),\n      window: createElement(this._tagsProperties.window),\n      div: createElement(this._tagsProperties.div),\n      titleWrap:  createElement(this._tagsProperties.titleWrap),\n      title: createElement(this._tagsProperties.title),\n      img: createElement(this._tagsProperties.img),\n      information: createElement(this._tagsProperties.information),\n      closeBtn: createElement(this._tagsProperties.closeBtn),\n      closeImg:  createElement(this._tagsProperties.closeImg),\n    };\n  }\n\n  _playAgainClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.playAgainClick();\n  }\n\n  setPlayAgainClickHandler(callback) {\n    this._callback.playAgainClick = callback;\n    this._elements.closeBtn.addEventListener(\n      `click`,\n      this._playAgainClickHandler,\n    );\n  }\n}","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Gallery extends AbstractView {\n  constructor(crosswords) {\n    super();\n    this._crosswords = crosswords;\n    // this._crossword = crossword;\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n    this._closeClickHandler = this._closeClickHandler.bind(this);\n    this._gameClickHandler = this._gameClickHandler.bind(this);\n  }\n\n  getStructure() {\n    const nodeList = [];\n    this._elements.gallery.forEach(elNode => {\n      const newNode = {\n        element: elNode.exWrap,\n          child: [\n            {element: elNode.exImg},\n            {element: elNode.exName},\n            {element: elNode.level.wrap,\n              child: Array.from({ length: Number(elNode.level.levelNumber) }, (el, i) => elNode.level[`star${i + 1}`])\n            }\n          ]\n        };\n\n        nodeList.push(newNode);\n    })\n\n    const node = {\n      element: this._elements.aside,\n      child: [\n        {\n          element: this._elements.window,\n          child: [\n            {\n              element: this._elements.windowWrap,\n              child: \n                [{element: this._elements.titleWrap,\n                    child: \n                      [{element: this._elements.title},\n                      {element: this._elements.closeBtn,\n                        child: [{element: this._elements.closeImg}]}]},\n                {element: this._elements.galleryWrap,\n                  child: nodeList},\n              ],\n            },\n          ]\n        }\n      ],\n    };\n\n    \n    return node;\n  }\n  getElementProperties() {\n    return {\n      aside: {tag: \"aside\", className: \"modal-gallery\"},\n      window: {tag: \"div\", className: \"modal-gallery__window\"},\n      windowWrap: {tag: \"div\", className: \"modal-gallery__wrapper\"},\n      titleWrap: {tag: \"div\", className: \"modal-gallery__title-wrap\"},\n      title: {tag: \"h2\", className: \"modal-gallery__title\", textContent: `Gallery`},\n      closeBtn: {tag: \"a\", className: \"modal-gallery__button\"},\n      closeImg: {tag: 'img', className: 'modal-gallery__button-img', src: './img/icons/close.png', alt: 'Close window', width: '40', height: '40'},\n      galleryWrap: {tag: \"div\", className: \"modal-gallery__gallery-wrap\"},\n      levelWrap: {tag: 'div', className: 'modal-gallery__level-wrapper'},\n      star: {tag: 'img', className: 'modal-gallery__level-img', src: './img/icons/level.png', alt: 'star level', width: '40', height: '40'}\n    }\n  }\n  generateNode() {\n    const node = {\n      aside: createElement(this._tagsProperties.aside),\n      window: createElement(this._tagsProperties.window),\n      windowWrap: createElement(this._tagsProperties.windowWrap),\n      titleWrap:  createElement(this._tagsProperties.titleWrap),\n      title: createElement(this._tagsProperties.title),\n      closeBtn: createElement(this._tagsProperties.closeBtn),\n      closeImg:  createElement(this._tagsProperties.closeImg),\n      galleryWrap: createElement(this._tagsProperties.galleryWrap),\n      gallery: [],\n      };\n\n    this._crosswords.forEach(element => {\n      const newNode = {\n        exWrap: createElement({tag: \"div\", className: \"modal-gallery__example-wrap\", data: `${element.id}`}),\n        exImg: createElement({tag: 'img', className: 'modal-gallery__example-img', src: `./img/example/${element.img}.png`, alt: `${element.name}`, width: '40', height: '40'}),\n        exName: createElement({tag: \"p\", className: \"modal-gallery__example-name\",textContent: `${element.name}`}),\n        level: {\n          wrap: createElement(this._tagsProperties.levelWrap),\n          levelNumber: element.level\n        }\n      }\n\n      for(let i = 1; i <= element.level; i+=1) {\n        newNode.level[`star${i}`] = createElement(this._tagsProperties.star);\n      }\n\n      node.gallery.push(newNode);\n    });\n\n    return node;\n  }\n\n  _closeClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.closeClick();\n  }\n\n  _gameClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.gameClick(evt.currentTarget.data);\n  }\n\n  setCloseClickHandler(callback) {\n    this._callback.closeClick = callback;\n    this._elements.closeBtn.addEventListener(\n      `click`,\n      this._closeClickHandler,\n    );\n  }\n  setGameClickHandler(callback) {\n    this._callback.gameClick = callback;\n    this._elements.gallery.forEach(game => {\n      game.exWrap.addEventListener(\n        `click`,\n        this._gameClickHandler,\n      )\n    })\n  };\n}","import AbstractView from './abstract.js';\nimport { createElement } from '../utils/render.js';\n\nexport default class Main extends AbstractView {\n  constructor() {\n    super();\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n  }\n  getStructure() {\n    return {\n      element: this._elements.main,\n      child: [\n        {element: this._elements.table.section,\n        child: [\n          {element: this._elements.table.h2}, \n          {element: this._elements.table.crosswordWrap}]},\n        {element: this._elements.additional.section,\n        child: [{element: this._elements.additional.h2}]}\n      ]\n    };\n  }\n  getElementProperties() {\n    return {\n      main: {\n        tag: 'main',\n        className: 'game__wrapper'\n      },\n      table: {\n        section: {\n          tag: 'section',\n          className: 'game__table table'\n        },\n        h2: {\n          tag: 'h2',\n          className: 'visually-hidden',\n          textContent: 'Game table'\n        },\n        crosswordWrap: {\n          tag: 'div',\n          className: 'game__crossword-wrapper'\n        }\n      },\n      additional: {\n        section: {\n          tag: 'section',\n          className: 'game__additional'\n        },\n        h2: {\n          tag: 'h2',\n          className: 'visually-hidden',\n          textContent: 'Additional information'\n        },\n        \n      }\n    }\n  }\n  generateNode() {\n    return {\n      main: createElement(this._tagsProperties.main),\n      table: {\n        section: createElement(this._tagsProperties.table.section),\n        h2: createElement(this._tagsProperties.table.h2),\n        crosswordWrap: createElement(this._tagsProperties.table.crosswordWrap)\n      },\n      additional: {\n        section: createElement(this._tagsProperties.additional.section),\n        h2: createElement(this._tagsProperties.additional.h2),\n      }\n    };\n  }\n}","import AbstractView from './abstract.js';\nimport { createElement } from '../utils/render.js';\nimport CrosswordModel from \"../model/crossword.js\";\n\nexport default class Results extends AbstractView {\n  constructor(results, crosswords) {\n    super();\n    this._results = results;\n    this._crosswords = new CrosswordModel();\n    this._crosswords.setCrosswords(crosswords);\n    this._tagsProperties = this.getElementProperties();\n    this._elements = this.generateNode();\n    this._structure = this.getStructure();\n  }\n  getStructure() {\n    const node = {\n      element: this._elements.resultsWrap,\n      child: [\n        {element: this._elements.titleWrap,\n          child: [\n            {element: this._elements.img}, \n            {element: this._elements.titleP}\n          ]\n        },\n        \n      ]\n    };\n    this._elements.results.forEach(elNode => {\n      const newNode = {\n        element: elNode.wrapInf,\n        child: [\n          {element: elNode.resultWrap,\n            child: [{element: elNode.p}]},\n          {element: elNode.level.wrap,\n            child: Array.from({ length: Number(elNode.level.levelNumber) }, (el, i) => elNode.level[`star${i + 1}`])}\n        ]};\n\n      node.child.push(newNode);\n    })\n    \n    return node;\n  }\n  getElementProperties() {\n    const node = {\n      resultsWrap: {tag: 'div', className: 'game__results results'},\n      titleWrap:{tag: 'div', className: 'results__title-wrapper'},\n      img: {tag: 'img',className: 'results__img',src: './img/icons/results.png',alt: 'Results table',width: '40',height: '40'},\n      titleP: {tag: 'p', className: 'results__title', textContent: 'Results'},\n      wrapInf: {tag: 'div', className: 'results__information-wrapper'},\n      resultWrap: {tag: 'div', className: 'results__result-wrapper'},\n      level: {\n        wrap: {tag: 'div', className: 'results__level-wrapper'},\n        star: {tag: 'img', className: 'results__level-img', src: './img/icons/level.png', alt: 'star level', width: '40', height: '40'}\n      }\n    }\n    return node;\n  }\n  generateNode() {\n    const node = {\n      resultsWrap: createElement(this._tagsProperties.resultsWrap),\n      titleWrap: createElement(this._tagsProperties.titleWrap),\n      img: createElement(this._tagsProperties.img),\n      titleP: createElement(this._tagsProperties.titleP),\n      \n      results: []\n    };\n\n    this._results.forEach(result => {\n      const cross = this._crosswords.getElementById(result.id);\n      const newResultNode = {\n        wrapInf: createElement(this._tagsProperties.wrapInf),\n        resultWrap: createElement(this._tagsProperties.resultWrap),\n        p: createElement({tag: 'p', className: 'results__information', textContent: `${result.time} - ${cross.name}`}),\n        level: {\n          wrap: createElement(this._tagsProperties.level.wrap),\n          levelNumber: cross.level\n        }\n      };\n\n      for(let i = 1; i <= cross.level; i+=1) {\n        newResultNode.level[`star${i}`] = createElement(this._tagsProperties.level.star);\n      }\n      node.results.push(newResultNode); \n      \n    });\n    return node;\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"../scss/main.scss\";\nimport mockFile from \"../mock/mock.json\";\nimport CrosswordModel from \"./model/crossword.js\";\nimport NanogramsPresenter from \"./presenter/nanograms.js\";\n\nconst siteBodyElement = document.querySelector(`body`);\n\nif (siteBodyElement !== null) {\n  const crosswordModel = new CrosswordModel();\n\n  const initData = (data) => {\n    const crosswords = data.map(crosswordModel.adaptToClient);\n    crosswordModel.setCrosswords(crosswords);\n  };\n\n  initData(mockFile);\n\n  const nanogramsPresenter = new NanogramsPresenter(siteBodyElement);\n  nanogramsPresenter.init(crosswordModel.getCrosswords());\n}"],"names":[],"sourceRoot":""}