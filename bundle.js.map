{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAkE;AACnD;AACf,gBAAgB,yDAAY;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,iBAAiB,EAAE,MAAM;AACpD;AACA;AACA;;AAEA;AACA,8BAA8B,oDAAO,SAAS,mDAAM,SAAS,mDAAM;AACnE;AACA;AACA;;;;;;;;;;;;;;;;ACrB2D;AAC5C;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,eAAe,GAAG,uDAAa,CAAC;AACzC;AACA;AACA;;AAEA;AACA;AACA,SAAS,eAAe,GAAG,oDAAU,CAAC;AACtC;AACA;AACA;;AAEA;AACA,yBAAyB,uDAAa;AACtC;;AAEA;AACA,yBAAyB,oDAAU;AACnC;;AAEA;AACA;AACA;AACA,WAAW,eAAe,GAAG,cAAc;AAC3C;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7Ce;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1D4C;AACW;AACnB;AACW;;AAEhC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,yDAAY;AAChC;;AAEA,sBAAsB,qDAAK,CAAC,uDAAU;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA;AACA;;AAEA,IAAI,wDAAM;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AChIoD;AAMzB;;AAEsB;;AAElC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yDAAQ;AACzC,yBAAyB,+DAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,0DAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,wDAAM;AACV;AACA;AACA;AACA,IAAI,wDAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,0DAAS;AAC/C;AACA;AACA,MAAM;AACN;;AAEA;AACA,WAAW,8DAAa;AACxB;AACA;;;;;;;;;;;;;;;;;;ACpHoD;AACP;AACM;;AAEpC;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,2DAAc;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAW;AACjD;AACA;AACA,IAAI,wDAAM;AACV;AACA;AACA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCoD;AACR;AACD;AACP;AACG;AACE;AACU;AACI;AACJ;AACQ;AACF;AACF;AACR;;AAEhC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,qDAAQ;AACxB;;AAEA,2BAA2B,2DAAc;AACzC;AACA,qBAAqB,qDAAK;;AAE1B,iCAAiC,6DAAgB;AACjD,+BAA+B,2DAAc;AAC7C,mCAAmC,+DAAkB;AACrD,kCAAkC,+DAAiB;;AAEnD,6BAA6B,0DAAY;AACzC,iCAAiC,8DAAgB;;AAEjD;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mDAAM;AAC/B;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,mDAAM;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,mDAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAM;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAM;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpOoD;AACU;AAC1B;AACS;;AAE9B;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,qDAAK,CAAC,uDAAU;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,wDAAW;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,wDAAM;AACZ;;AAEA;AACA;AACA,yBAAyB,2CAA2C;AACpE;AACA;AACA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;;AAEA;AACA,8CAA8C,0DAAa;AAC3D;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvD4C;AACM;AACT;;AAE1B;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sDAAS;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;AACA;AACA,MAAM,0DAAa;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9DoD;AACf;;AAEtB;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,oDAAO;AACzC,IAAI,wDAAM;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI,wDAAM;AACV;AACA;;;;;;;;;;;;;;;;;;;;;AC3BO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA,sBAAsB,aAAa,GAAG,UAAU;;AAEhD;AACP;AACA;AACA;;AAEO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzB2C;AACO;;AAE3C,2CAA2C,0DAAa;AAC/D;AACA;;AAEA;AACA,SAAS,0DAAa;AACtB;AACA;AACA;AACA,SAAS,0DAAa;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,6BAA6B,yDAAQ;AACrC;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC3E4C;AACrC;AACP;AACA;AACA;AACA;;AAEO;AACP,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,YAAY,QAAQ,GAAG,iCAAiC,EAAE,iBAAiB;AAC3E;;AAEO;AACP;AACA;AACA,SAAS,oDAAO;AAChB;AACA;AACA,SAAS,oDAAO;AAChB;AACA;AACA,SAAS,oDAAO;AAChB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3Ce;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjByC;AACU;;AAEpC,oBAAoB,oDAAY;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D,aAAa;AACb;AACA;AACA,wBAAwB,oCAAoC;AAC5D,aAAa;AACb;AACA;AACA;AACA,kBAAkB,+BAA+B;AACjD,4DAA4D,MAAM;AAClE;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,oBAAoB,mCAAmC;AACvD,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gBAAgB,4CAA4C;AAC5D,mBAAmB,6CAA6C;AAChE;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA,SAAS;AACT,qBAAqB,+CAA+C;AACpE;AACA;AACA;AACA,0BAA0B,qBAAqB;AAC/C,SAAS;AACT;AACA,kBAAkB,+CAA+C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,aAAa,+CAA+C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA,iBAAiB,+DAAa;AAC9B;AACA,cAAc,+DAAa;AAC3B,iBAAiB,+DAAa;AAC9B,aAAa,+DAAa;AAC1B,mBAAmB,+DAAa;AAChC,eAAe,+DAAa;AAC5B;AACA,gBAAgB,+DAAa;AAC7B,SAAS;AACT,OAAO;AACP;AACA,WAAW,+DAAa;AACxB,aAAa,+DAAa;AAC1B,OAAO;AACP;;AAEA,oBAAoB,4BAA4B;AAChD,8BAA8B,EAAE,KAAK,+DAAa;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpJyC;AACU;;AAEpC,uBAAuB,oDAAY;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,2BAA2B;AACrC;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAA4C;AACpE,aAAa;AACb;AACA;AACA,wBAAwB,+CAA+C;AACvE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAiD;AAC7E,iBAAiB;AACjB;AACA;AACA,4BAA4B,iDAAiD;AAC7E,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D,kBAAkB,4CAA4C;AAC9D;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D,kBAAkB,4CAA4C;AAC9D;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAmD;AACnE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gBAAgB,mDAAmD;AACnE;AACA,eAAe,mDAAmD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,eAAe,uDAAuD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,kBAAkB,6CAA6C;AAC/D,kBAAkB,wDAAwD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,wDAAwD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,gBAAgB,qDAAqD;AACrE;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,+CAA+C;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB,+CAA+C;AACjE,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,+DAAa;AAC3B,UAAU,+DAAa;AACvB;AACA,cAAc,+DAAa;AAC3B;AACA,aAAa,+DAAa;AAC1B,eAAe,+DAAa;AAC5B,SAAS;AACT;AACA,aAAa,+DAAa;AAC1B,eAAe,+DAAa;AAC5B,SAAS;AACT;AACA,gBAAgB,+DAAa;AAC7B,gBAAgB,+DAAa;AAC7B,mBAAmB,+DAAa;AAChC,gBAAgB,+DAAa;AAC7B,mBAAmB,+DAAa;AAChC,SAAS;AACT,OAAO;AACP;AACA,cAAc,+DAAa;AAC3B;AACA,iBAAiB,+DAAa;AAC9B,iBAAiB,+DAAa;AAC9B,gBAAgB,+DAAa;AAC7B,SAAS;AACT;AACA,iBAAiB,+DAAa;AAC9B,iBAAiB,+DAAa;AAC9B,gBAAgB,+DAAa;AAC7B,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxQyC;AACU;AACP;;AAE7B,wBAAwB,oDAAY;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,+DAAa;AAC1B;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA,YAAY,+DAAa,GAAG,6BAA6B;AACzD;AACA,OAAO;;AAEP,sBAAsB,eAAe;AACrC;AACA,cAAc,+DAAa,GAAG,+BAA+B;AAC7D,SAAS;AACT;;AAEA;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAa;AAC3B;AACA,oCAAoC,gBAAgB,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,iBAAiB;AAC/G;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAa,GAAG,6BAA6B;AACzD;AACA,OAAO;AACP,sBAAsB,eAAe;AACrC;AACA;AACA;AACA,cAAc,+DAAa;AAC3B;AACA,oCAAoC,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB;AAC/G;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAa;AAC3B;AACA,+BAA+B,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB;AACtF,wBAAwB,EAAE,GAAG,EAAE;AAC/B,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;;AAEA,sBAAsB,UAAU;AAChC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,kBAAkB,oDAAO;AACzB,QAAQ;AACR;AACA,kBAAkB,oDAAO;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,oDAAO;AACzB,QAAQ;AACR;AACA,kBAAkB,oDAAO;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7TyC;AACU;;AAEpC,sBAAsB,oDAAY;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uBAAuB;AACnC,YAAY,wBAAwB;AACpC;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D,6CAA6C,MAAM;AACnD;AACA,WAAW;AACX;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA,gCAAgC,iCAAiC;AACjE,qBAAqB;AACrB;AACA,iBAAiB;AACjB,kBAAkB,qDAAqD;AACvE;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,0CAA0C;AACzD,gBAAgB,gDAAgD;AAChE,oBAAoB,iDAAiD;AACrE,mBAAmB,oDAAoD;AACvE;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,qBAAqB,sDAAsD;AAC3E,mBAAmB,uDAAuD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,+DAAa;AAC1B,cAAc,+DAAa;AAC3B,kBAAkB,+DAAa;AAC/B,iBAAiB,+DAAa;AAC9B,aAAa,+DAAa;AAC1B,gBAAgB,+DAAa;AAC7B,gBAAgB,+DAAa;AAC7B,mBAAmB,+DAAa;AAChC;AACA;;AAEA;AACA;AACA,gBAAgB,+DAAa;AAC7B;AACA;AACA,mBAAmB,WAAW;AAC9B,SAAS;AACT,eAAe,+DAAa;AAC5B;AACA;AACA,gCAAgC,YAAY;AAC5C,kBAAkB,aAAa;AAC/B;AACA;AACA,SAAS;AACT,gBAAgB,+DAAa;AAC7B;AACA;AACA,0BAA0B,aAAa;AACvC,SAAS;AACT;AACA,gBAAgB,+DAAa;AAC7B;AACA,SAAS;AACT;;AAEA,sBAAsB,oBAAoB;AAC1C,6BAA6B,EAAE,KAAK,+DAAa;AACjD;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxKyC;AACU;;AAEpC,mBAAmB,oDAAY;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iCAAiC;AAC/C,cAAc,4CAA4C;AAC1D;AACA,SAAS;AACT;AACA;AACA,oBAAoB,sCAAsC;AAC1D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,YAAY,+DAAa;AACzB;AACA,iBAAiB,+DAAa;AAC9B,YAAY,+DAAa;AACzB,uBAAuB,+DAAa;AACpC,OAAO;AACP;AACA,iBAAiB,+DAAa;AAC9B,YAAY,+DAAa;AACzB,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9EyC;AACU;AACP;AACO;;AAEpC,sBAAsB,oDAAY;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;;AAEN,2BAA2B,2DAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4BAA4B;AAC1C,cAAc,+BAA+B;AAC7C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAsC,mBAAmB,GAAG;AACxE;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D,6CAA6C,MAAM;AACnD;AACA,WAAW;AACX;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qBAAqB,gDAAgD;AACrE,mBAAmB,iDAAiD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,gBAAgB,+DAA+D;AAC/E,iBAAiB,uDAAuD;AACxE,oBAAoB,kDAAkD;AACtE;AACA,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAa;AAChC,iBAAiB,+DAAa;AAC9B,WAAW,+DAAa;AACxB,cAAc,+DAAa;;AAE3B;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,+DAAa;AAC9B,oBAAoB,+DAAa;AACjC,WAAW,+DAAa;AACxB;AACA;AACA,0BAA0B,wDAAO,eAAe,IAAI,WAAW;AAC/D,SAAS;AACT;AACA,gBAAgB,+DAAa;AAC7B;AACA,SAAS;AACT;;AAEA,sBAAsB,kBAAkB;AACxC,mCAAmC,EAAE,KAAK,+DAAa;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;AC/HyC;AACU;;AAEpC,oBAAoB,oDAAY;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,QAAQ,GAAG,iCAAiC,EAAE,iBAAiB;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD,SAAS;AACT;AACA;AACA,oBAAoB,6BAA6B;AACjD,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,cAAc,+CAA+C;AAC7D,iBAAiB,6CAA6C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,8CAA8C;AAChE,cAAc,yDAAyD;AACvE;AACA;;AAEA;AACA;AACA,YAAY,+DAAa;AACzB,eAAe,+DAAa;AAC5B,WAAW,+DAAa;AACxB,gBAAgB,+DAAa;AAC7B,YAAY,+DAAa;AACzB;AACA;AACA;;;;;;;;;;;;;;;;;ACxDyC;AACU;;AAEpC,qBAAqB,oDAAY;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD,sBAAsB,8BAA8B;AACpD;AACA,iBAAiB;AACjB,kBAAkB,oCAAoC;AACtD;AACA;AACA,4BAA4B,iCAAiC;AAC7D,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,0CAA0C;AACzD,gBAAgB,gDAAgD;AAChE,aAAa,iDAAiD;AAC9D,mBAAmB,oDAAoD;AACvE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,yDAAyD,YAAY;AACrE,OAAO;AACP,kBAAkB,8CAA8C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,+DAAa;AAC1B,cAAc,+DAAa;AAC3B,WAAW,+DAAa;AACxB,iBAAiB,+DAAa;AAC9B,aAAa,+DAAa;AAC1B,WAAW,+DAAa;AACxB,mBAAmB,+DAAa;AAChC,gBAAgB,+DAAa;AAC7B,gBAAgB,+DAAa;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;UCvGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACN0B;AACc;AACa;AACQ;;AAE7D;;AAEA;AACA,6BAA6B,8DAAc;AAC3C,qBAAqB,4CAAQ;AAC7B;;AAEA,iCAAiC,kEAAkB;AACnD;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA","sources":["webpack://nanograms/./src/scss/main.scss","webpack://nanograms/./src/js/api/sound.js","webpack://nanograms/./src/js/api/store.js","webpack://nanograms/./src/js/model/crossword.js","webpack://nanograms/./src/js/presenter/controls.js","webpack://nanograms/./src/js/presenter/crossword.js","webpack://nanograms/./src/js/presenter/gallery.js","webpack://nanograms/./src/js/presenter/nanograms.js","webpack://nanograms/./src/js/presenter/results.js","webpack://nanograms/./src/js/presenter/timer.js","webpack://nanograms/./src/js/presenter/win.js","webpack://nanograms/./src/js/utils/const.js","webpack://nanograms/./src/js/utils/render.js","webpack://nanograms/./src/js/utils/utils.js","webpack://nanograms/./src/js/view/abstract.js","webpack://nanograms/./src/js/view/chose.js","webpack://nanograms/./src/js/view/controls.js","webpack://nanograms/./src/js/view/crossword.js","webpack://nanograms/./src/js/view/gallery.js","webpack://nanograms/./src/js/view/main.js","webpack://nanograms/./src/js/view/results.js","webpack://nanograms/./src/js/view/timer.js","webpack://nanograms/./src/js/view/win.js","webpack://nanograms/webpack/bootstrap","webpack://nanograms/webpack/runtime/define property getters","webpack://nanograms/webpack/runtime/hasOwnProperty shorthand","webpack://nanograms/webpack/runtime/make namespace object","webpack://nanograms/./src/app.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import { FOLDER_SOUND, COMMAND, SOUNDS } from \"../utils/const.js\";\nexport default class Sound {\n  #pathFolder = FOLDER_SOUND;\n  #audio = new Audio();\n  #soundsOnOff = true;\n\n  soundsToggle() {\n    this.#soundsOnOff = !this.#soundsOnOff;\n  }\n\n  playSound(event) {\n    if (this.#soundsOnOff) {\n      this.#audio.src = `${this.#pathFolder}${event}`;\n      this.#audio.play();\n    }\n  }\n\n  playSoundForCommand(command) {\n    const event = command === COMMAND.CROSS ? SOUNDS.CROSS : SOUNDS.FILL;\n    this.playSound(event);\n  }\n}\n","import { STORE_SAVE, STORE_RESULTS } from \"../utils/const\";\nexport default class Store {\n  #storage;\n  #storeKey;\n\n  constructor(key, storage) {\n    this.#storage = storage;\n    this.#storeKey = key;\n  }\n\n  saveResult(results) {\n    this.#storage.setItem(\n      `${this.#storeKey}-${STORE_RESULTS}`,\n      JSON.stringify(results),\n    );\n  }\n\n  saveGame(saveGame) {\n    this.#storage.setItem(\n      `${this.#storeKey}-${STORE_SAVE}`,\n      JSON.stringify(saveGame),\n    );\n  }\n\n  getResult() {\n    return this.#getItem(STORE_RESULTS);\n  }\n\n  getSave() {\n    return this.#getItem(STORE_SAVE);\n  }\n\n  #getItem(additionalKey) {\n    try {\n      const storedDataString = this.#storage.getItem(\n        `${this.#storeKey}-${additionalKey}`,\n      );\n      if (storedDataString) {\n        const resultsData = JSON.parse(storedDataString);\n        return resultsData;\n      } else return null;\n    } catch (err) {\n      return null;\n    }\n  }\n}\n","export default class Crossword {\n  #crosswords;\n\n  constructor() {\n    this.#crosswords = [];\n  }\n\n  setCrosswords(crosswords) {\n    this.#crosswords = crosswords.slice();\n  }\n\n  getCrosswords() {\n    return this.#crosswords;\n  }\n\n  getCrosswordById(id) {\n    let index = 0;\n    let currentEl = this.#crosswords[index];\n    while (currentEl.id !== id) {\n      index += 1;\n      if (index > this.#crosswords.length - 1) break;\n      currentEl = this.#crosswords[index];\n    }\n\n    return currentEl;\n  }\n\n  getNewCrossword(newCrossword, currentCrossword, isFirstStart = false) {\n    if (newCrossword) return newCrossword;\n    else return this.#getRandomCrossword(currentCrossword, isFirstStart);\n  }\n\n  adaptToClient(crosswords) {\n    const adaptedQuestion = Object.assign({}, crosswords, {\n      id: crosswords.id,\n      name: crosswords.name,\n      level: Number(crosswords.level),\n      playTable: crosswords.playTable,\n    });\n    return adaptedQuestion;\n  }\n\n  #getNextCrossword() {\n    return this.#crosswords[\n      Math.floor(Math.random() * this.#crosswords.length)\n    ];\n  }\n\n  #getRandomCrossword(current, isFirstStart) {\n    let newCrossword = this.#getNextCrossword();\n    while (\n      current === newCrossword ||\n      (isFirstStart && newCrossword.level != 1)\n    ) {\n      newCrossword = this.#getNextCrossword();\n    }\n    return newCrossword;\n  }\n}\n","import { render } from \"../utils/render.js\";\nimport { STORE_NAME, SOUNDS } from \"../utils/const.js\";\nimport Store from \"../api/store.js\";\nimport ControlsView from \"../view/controls.js\";\n\nexport default class Controls {\n  #gameContainer;\n  #components;\n  #store;\n  #sound;\n  #saveGameInf;\n  #callback;\n  #settings;\n\n  constructor(gameContainer, sound) {\n    this.#gameContainer = gameContainer;\n    this.#components = {\n      controls: new ControlsView(),\n    };\n\n    this.#store = new Store(STORE_NAME, window.localStorage);\n    this.#sound = sound;\n\n    this.#saveGameInf = {};\n    this.#callback = {};\n    this.#settings = {\n      isHaveSaveGame: false,\n    };\n\n    this.#getSaveFromStorage();\n  }\n\n  setRefreshCallback(callback) {\n    this.#callback.refresh = callback;\n    return this;\n  }\n  setShowAnswersCallback(callback) {\n    this.#callback.showAnswers = callback;\n    return this;\n  }\n  setLoadCallback(callback) {\n    this.#callback.load = callback;\n    return this;\n  }\n  setSaveCallback(callback) {\n    this.#callback.save = callback;\n    return this;\n  }\n  setFindSaveCallback(callback) {\n    this.#callback.findSave = callback;\n    if (this.#settings.isHaveSaveGame) this.#callback.findSave();\n    return this;\n  }\n\n  getTimeContainer() {\n    return this.#components.controls.elements.options.wrap;\n  }\n  render() {\n    const onRefreshClick = () => {\n      this.#callback.refresh();\n    };\n\n    const onShowAnswersClick = () => {\n      this.#callback.showAnswers();\n    };\n\n    const onSaveClick = () => {\n      this.#saveGame();\n    };\n    const onLoadClick = () => {\n      this.#loadGame();\n    };\n    const onSoundOnOff = () => {\n      this.#sound.soundsToggle();\n      this.#sound.playSound(SOUNDS.SWITCH);\n    };\n    const onThemeClick = () => {\n      this.#sound.playSound(SOUNDS.SWITCH);\n      this.#gameContainer.classList.toggle(\"light-theme\");\n      this.#gameContainer.classList.toggle(\"dark-theme\");\n    };\n\n    render(this.#gameContainer, this.#components[\"controls\"]);\n\n    this.#components[\"controls\"]\n      .setRefreshClickHandler(onRefreshClick)\n      .setShowAnswersClickHandler(onShowAnswersClick)\n      .setSaveClickHandler(onSaveClick)\n      .setLoadClickHandler(onLoadClick)\n      .setThemeClickHandler(onThemeClick)\n      .setSoundClickHandler(onSoundOnOff);\n  }\n\n  setSaveEnabled() {\n    this.#components[\"controls\"].setSaveEnabled();\n  }\n\n  setSaveDisabled() {\n    this.#components[\"controls\"].setSaveDisabled();\n  }\n\n  #saveGame() {\n    this.#settings.isHaveSaveGame = true;\n    const data = this.#callback.save();\n    this.#components[\"controls\"].setLoadEnable();\n    this.#saveGameInf[\"crossword\"] = data.crossword;\n    this.#saveGameInf[\"seconds\"] = data.seconds;\n    this.#saveGameInf[\"answers\"] = data.answers;\n\n    this.#store.saveGame(this.#saveGameInf);\n  }\n\n  #loadGame() {\n    if (this.#settings.isHaveSaveGame) {\n      this.#getSaveFromStorage();\n      this.#callback.load(this.#saveGameInf);\n    }\n  }\n\n  #getSaveFromStorage() {\n    const saveGame = this.#store.getSave();\n\n    if (saveGame) {\n      this.#saveGameInf = saveGame;\n      this.#settings.isHaveSaveGame = true;\n      this.#components[\"controls\"].setLoadEnable();\n    }\n  }\n}\n","import { render, remove } from \"../utils/render.js\";\nimport {\n  deepCopy,\n  getClearMatrix,\n  compareMatrix,\n  setAnswer,\n} from \"../utils/utils.js\";\n\nimport CrosswordView from \"../view/crossword.js\";\n\nexport default class Crossword {\n  #gameContainer;\n  #components;\n  #callback;\n  #crossword;\n  #answers;\n  #sound;\n  #settings;\n\n  constructor(sound) {\n    this.#components = {};\n    this.#callback = {};\n    this.#answers = [];\n    this.#sound = sound;\n\n    this.#settings = {\n      isGameStarted: false,\n      isShowAnswers: false,\n    };\n  }\n\n  setContainer(gameContainer) {\n    this.#gameContainer = gameContainer;\n  }\n  setCrossword(newCrossword) {\n    this.#crossword = newCrossword;\n  }\n  getCrossword() {\n    return this.#crossword;\n  }\n  setAnswers(answers = undefined) {\n    if (answers) this.#answers = deepCopy(answers);\n    else this.#answers = getClearMatrix(this.#crossword.playTable.length);\n  }\n  getAnswers() {\n    return this.#answers;\n  }\n  startGame() {\n    this.#settings.isGameStarted = true;\n  }\n  stopGame() {\n    this.#settings.isGameStarted = false;\n  }\n  show() {\n    this.#settings.isShowAnswers = true;\n  }\n  hide() {\n    this.#settings.isShowAnswers = false;\n  }\n  setStartGameCallback(callback) {\n    this.#callback.startGame = callback;\n    return this;\n  }\n  setWinCallback(callback) {\n    this.#callback.winGame = callback;\n    return this;\n  }\n  updateComponent() {\n    this.#components[\"crossword\"] = new CrosswordView(this.#crossword);\n  }\n  refresh() {\n    this.#components[\"crossword\"].setClearCrossword();\n    this.#components[\"crossword\"].startGame();\n  }\n  showAnswers() {\n    this.setAnswers(this.#crossword.playTable);\n    this.#components[\"crossword\"].setAnswersCrossword(\n      this.#crossword.playTable,\n    );\n    this.#components[\"crossword\"].stopGame();\n  }\n  render() {\n    const onCellClick = (index, command) => {\n      if (!this.#settings.isShowAnswers) {\n        if (!this.#settings.isGameStarted) {\n          this.#settings.isGameStarted = true;\n          this.#callback.startGame();\n        }\n        this.#setNextGameStep(index, command);\n      }\n    };\n\n    render(this.#gameContainer, this.#components[\"crossword\"]);\n    this.#components[\"crossword\"].setCellClickHandler(onCellClick);\n  }\n  destroy() {\n    remove(this.#components[\"crossword\"]);\n  }\n\n  loadGame() {\n    this.#components[\"crossword\"].setAnswersCrossword(this.#answers);\n  }\n  #setNextGameStep(index, command) {\n    this.#setNewAnswer(index, command);\n  }\n\n  #setNewAnswer(index, command) {\n    this.#answers[index.i][index.j] = setAnswer(command);\n    if (this.#isWin()) {\n      this.#callback.winGame();\n    } else this.#sound.playSoundForCommand(command);\n  }\n\n  #isWin() {\n    return compareMatrix(this.#answers, this.#crossword.playTable);\n  }\n}\n","import { render, remove } from \"../utils/render.js\";\nimport GalleryView from \"../view/gallery.js\";\nimport CrosswordModel from \"../model/crossword.js\";\n\nexport default class Gallery {\n  #gameContainer;\n  #components;\n  #crossModel;\n\n  constructor(gameContainer, crosswords) {\n    this.#gameContainer = gameContainer;\n    this.#components = {};\n\n    this.#crossModel = new CrosswordModel();\n    this.#crossModel.setCrosswords(crosswords);\n  }\n\n  show(callback) {\n    const onGameClick = (data) => {\n      this.destroy();\n      if (data) {\n        callback(data);\n      }\n    };\n    this.#components[\"gallery\"] = new GalleryView(\n      this.#crossModel.getCrosswords(),\n    );\n    render(this.#gameContainer, this.#components[\"gallery\"]);\n    this.#components[\"gallery\"]\n      .setCloseClickHandler(this.destroy)\n      .setGameClickHandler(onGameClick);\n  }\n\n  destroy = () => {\n    remove(this.#components[\"gallery\"]);\n  };\n}\n","import { render, remove } from \"../utils/render.js\";\nimport { getTime } from \"../utils/utils.js\";\nimport { SOUNDS } from \"../utils/const.js\";\nimport Sound from \"../api/sound.js\";\nimport MainView from \"../view/main.js\";\nimport ChoseView from \"../view/chose.js\";\nimport CrosswordModel from \"../model/crossword.js\";\nimport ResultsPresenter from \"../presenter/results.js\";\nimport TimerPresenter from \"../presenter/timer.js\";\nimport CrosswordPresenter from \"../presenter/crossword.js\";\nimport ControlsPresenter from \"../presenter/controls.js\";\nimport GalleryPresenter from \"../presenter/gallery.js\";\nimport WinPresenter from \"../presenter/win.js\";\n\nexport default class Nanograms {\n  #gameContainer;\n  #galleryPresenter;\n  #winPresenter;\n  #components;\n  #crossModel;\n  #resultsPresenter;\n  #timerPresenter;\n  #crosswordPresenter;\n  #controlsPresenter;\n  #settings;\n  sound;\n\n  constructor(gameContainer, crosswords) {\n    this.#gameContainer = gameContainer;\n\n    this.#components = {\n      main: new MainView(),\n    };\n\n    this.#crossModel = new CrosswordModel();\n    this.#crossModel.setCrosswords(crosswords);\n    this.sound = new Sound();\n\n    this.#resultsPresenter = new ResultsPresenter(this.#crossModel);\n    this.#timerPresenter = new TimerPresenter();\n    this.#crosswordPresenter = new CrosswordPresenter(this.sound);\n    this.#controlsPresenter = new ControlsPresenter(gameContainer, this.sound);\n\n    this.#winPresenter = new WinPresenter(gameContainer);\n    this.#galleryPresenter = new GalleryPresenter(gameContainer, crosswords);\n\n    this.#settings = {\n      isHaveSaveGame: false,\n      isGameStarted: false,\n      isShowAnswers: false,\n    };\n  }\n\n  startGame(props = {}) {\n    const {\n      newCrossword = undefined,\n      isReset = true,\n      isFirstStart = false,\n      answers = undefined,\n    } = props;\n    if (isReset) this.#resetSettings();\n    if (isFirstStart) this.#renderBase();\n    else {\n      this.#destroyGameComponents();\n      this.sound.playSound(SOUNDS.RENDER);\n    }\n    this.#crosswordPresenter.setCrossword(\n      this.#crossModel.getNewCrossword(\n        newCrossword,\n        this.#crosswordPresenter.getCrossword(),\n        isFirstStart,\n      ),\n    );\n    this.#crosswordPresenter.setAnswers(answers);\n    this.#updateGameComponents();\n    this.#renderGame();\n  }\n  onRefreshClick = () => {\n    this.sound.playSound(SOUNDS.REFRESH);\n    this.#crosswordPresenter.setAnswers();\n    this.#resetSettings();\n    this.#crosswordPresenter.refresh();\n  };\n\n  onShowAnswersClick = () => {\n    this.sound.playSound(SOUNDS.ANSWERS);\n    this.#crosswordPresenter.showAnswers();\n    this.#resetSettings();\n    this.#settings.isShowAnswers = true;\n    this.#crosswordPresenter.show();\n  };\n\n  onFindSave = () => {\n    this.#settings.isHaveSaveGame = true;\n  };\n\n  onLoadClick = (saveGame) => {\n    this.#loadGame(saveGame);\n  };\n\n  onSaveClick = () => {\n    this.#settings.isHaveSaveGame = true;\n    return {\n      crossword: this.#crosswordPresenter.getCrossword(),\n      seconds: this.#timerPresenter.getSeconds(),\n      answers: this.#crosswordPresenter.getAnswers(),\n    };\n  };\n\n  onCellClick = () => {\n    if (!this.#settings.isShowAnswers) {\n      if (!this.#settings.isGameStarted) {\n        this.#settings.isGameStarted = true;\n        this.#controlsPresenter.setSaveEnabled();\n        this.#timerPresenter.startGame();\n        this.#timerPresenter.start();\n      }\n    }\n  };\n\n  onRandomClick = () => {\n    const props = { isReset: true };\n    this.startGame(props);\n  };\n\n  onShowGalleryClick = () => {\n    this.#showGallery();\n  };\n\n  showWinModal = () => {\n    this.sound.playSound(SOUNDS.WIN);\n    const finishSeconds = this.#timerPresenter.getSeconds();\n    this.#resetSettings();\n    this.#resultsPresenter.update(\n      finishSeconds,\n      this.#crosswordPresenter.getCrossword(),\n    );\n\n    const onPlayAgainClick = () => {\n      const props = { isReset: true };\n      this.startGame(props);\n    };\n\n    this.#winPresenter.show(finishSeconds, onPlayAgainClick);\n  };\n\n  #renderBase() {\n    this.#controlsPresenter.render();\n    this.#controlsPresenter\n      .setRefreshCallback(this.onRefreshClick)\n      .setShowAnswersCallback(this.onShowAnswersClick)\n      .setLoadCallback(this.onLoadClick)\n      .setSaveCallback(this.onSaveClick)\n      .setFindSaveCallback(this.onFindSave);\n    render(this.#gameContainer, this.#components[\"main\"]);\n    this.#timerPresenter.setContainer(\n      this.#controlsPresenter.getTimeContainer(),\n    );\n    this.#timerPresenter.render();\n  }\n\n  #renderGame() {\n    render(\n      this.#components[\"main\"].elements.additional.section,\n      this.#components[\"chose\"],\n    );\n    this.#resultsPresenter.setContainer(\n      this.#components[\"main\"].elements.additional.section,\n    );\n    this.#resultsPresenter.render();\n    this.#crosswordPresenter.setContainer(\n      this.#components[\"main\"].elements.table.crosswordWrap,\n    );\n    this.#crosswordPresenter.render();\n    this.#crosswordPresenter\n      .setStartGameCallback(this.onCellClick)\n      .setWinCallback(this.showWinModal);\n    this.#components[\"chose\"]\n      .setRandomClickHandler(this.onRandomClick)\n      .setShowGalleryClickHandler(this.onShowGalleryClick);\n  }\n\n  #showGallery() {\n    const callback = (data) => {\n      if (data) {\n        const props = {\n          newCrossword: this.#crossModel.getCrosswordById(data),\n          isReset: true,\n        };\n        this.startGame(props);\n      }\n    };\n    this.#galleryPresenter.show(callback);\n  }\n  #resetSettings() {\n    this.#timerPresenter.reset();\n    this.#settings.isGameStarted = false;\n    this.#settings.isShowAnswers = false;\n    this.#controlsPresenter.setSaveDisabled();\n    this.#timerPresenter.stopGame();\n    this.#crosswordPresenter.stopGame();\n    this.#crosswordPresenter.hide();\n  }\n  #updateGameComponents() {\n    this.#components[\"chose\"] = new ChoseView(\n      this.#crosswordPresenter.getCrossword(),\n    );\n    this.#crosswordPresenter.updateComponent();\n    this.#resultsPresenter.updateComponent();\n  }\n  #destroyGameComponents() {\n    remove(this.#components[\"chose\"]);\n    this.#crosswordPresenter.destroy();\n    this.#resultsPresenter.destroy();\n  }\n\n  #loadGame(saveGame) {\n    if (this.#settings.isHaveSaveGame) {\n      const props = {\n        newCrossword: saveGame[\"crossword\"],\n        isReset: true,\n        answers: saveGame[\"answers\"],\n      };\n      this.startGame(props);\n      this.#timerPresenter.setSeconds(Number(saveGame[\"seconds\"]));\n      this.#crosswordPresenter.loadGame();\n    }\n  }\n}\n","import { render, remove } from \"../utils/render.js\";\nimport { STORE_NAME, STORE_RESULTS } from \"../utils/const.js\";\nimport Store from \"../api/store.js\";\nimport ResultsView from \"../view/results.js\";\n\nexport default class Results {\n  #gameContainer;\n  #components;\n  #crossModel;\n  #store;\n  #results;\n\n  constructor(crosswords) {\n    this.#crossModel = crosswords;\n    this.#components = {};\n    this.#store = new Store(STORE_NAME, window.localStorage);\n    this.#results = [];\n\n    this.#getResultFromStorage();\n  }\n\n  setContainer(gameContainer) {\n    this.#gameContainer = gameContainer;\n  }\n\n  updateComponent() {\n    this.#components[\"results\"] = new ResultsView(\n      this.#results,\n      this.#crossModel.getCrosswords(),\n    );\n  }\n\n  render() {\n    if (this.#results.length > 0)\n      render(this.#gameContainer, this.#components[\"results\"]);\n  }\n\n  update(finishTime, currentCrossword) {\n    this.#results.reverse();\n    this.#results.push({ time: finishTime, id: currentCrossword.id });\n    this.#results.reverse();\n    this.#results = this.#results.slice(0, 5);\n    this.#store.saveResult(this.#results);\n  }\n\n  destroy() {\n    remove(this.#components[\"results\"]);\n  }\n\n  #getResultFromStorage() {\n    const storageData = this.#store.getResult(STORE_RESULTS);\n    if (storageData) {\n      this.#results = storageData;\n    }\n  }\n}\n","import { render } from \"../utils/render.js\";\nimport { RENDER_METHOD } from \"../utils/const.js\";\nimport TimerView from \"../view/timer.js\";\n\nexport default class Timer {\n  #gameContainer;\n  #components;\n  #seconds;\n  #isGameStart;\n  #timer;\n\n  constructor() {\n    this.#seconds = 0;\n    this.#timer = null;\n    this.#isGameStart = false;\n    this.#components = {\n      timer: new TimerView(),\n    };\n  }\n\n  startGame() {\n    this.#isGameStart = true;\n  }\n  stopGame() {\n    this.#isGameStart = false;\n  }\n\n  setContainer(gameContainer) {\n    this.#gameContainer = gameContainer;\n  }\n\n  render() {\n    render(\n      this.#gameContainer,\n      this.#components[\"timer\"],\n      RENDER_METHOD.PREPEND,\n    );\n  }\n\n  start() {\n    if (!this.#timer) {\n      this.#timer = setInterval(() => {\n        if (!this.#isGameStart) this.reset();\n        this.#seconds += 1;\n        this.#components[\"timer\"].updateTimerDisplay(this.#seconds);\n      }, 1000);\n    }\n  }\n\n  setSeconds(seconds) {\n    this.#seconds = seconds;\n    this.#components[\"timer\"].updateTimerDisplay(this.#seconds);\n  }\n  getSeconds() {\n    return this.#seconds;\n  }\n  reset() {\n    if (this.#timer) clearInterval(this.#timer);\n    this.#timer = null;\n    this.#seconds = 0;\n    this.#components[\"timer\"].updateTimerDisplay(this.#seconds);\n  }\n}\n","import { render, remove } from \"../utils/render.js\";\nimport winView from \"../view/win.js\";\n\nexport default class Win {\n  #gameContainer;\n  #components;\n\n  constructor(gameContainer) {\n    this.#gameContainer = gameContainer;\n    this.#components = {};\n  }\n\n  show(finishTime, callback) {\n    this.#components[\"win\"] = new winView(finishTime);\n    render(this.#gameContainer, this.#components[\"win\"]);\n\n    const onPlayAgainClick = () => {\n      this.#destroyResultModal();\n      callback();\n    };\n\n    this.#components[\"win\"].setPlayAgainClickHandler(onPlayAgainClick);\n  }\n\n  #destroyResultModal() {\n    remove(this.#components[\"win\"]);\n  }\n}\n","export const COMMAND = {\n  FILL: \"fill\",\n  EMPTY: \"empty\",\n  CROSS: \"cross\",\n};\nconst STORE_PREFIX = `nanograms`;\nconst STORE_VER = `v1`;\nexport const STORE_RESULTS = `result-table`;\nexport const STORE_SAVE = `save-game`;\nexport const STORE_NAME = `${STORE_PREFIX}-${STORE_VER}`;\n\nexport const RENDER_METHOD = {\n  APPEND: \"append\",\n  PREPEND: \"prepend\",\n};\n\nexport const FOLDER_SOUND = \"./sound/\";\nexport const SOUNDS = {\n  FILL: \"click.mp3\",\n  CROSS: \"click-context.mp3\",\n  RENDER: \"random.mp3\",\n  REFRESH: \"refresh.mp3\",\n  ANSWERS: \"show-answers.mp3\",\n  SWITCH: \"switch.mp3\",\n  WIN: \"win.mp3\",\n};\n","import Abstract from \"../view/abstract.js\";\nimport { RENDER_METHOD } from \"../utils/const.js\";\n\nexport const render = (container, child, method = RENDER_METHOD.APPEND) => {\n  const containerEl = getElement(container);\n  const childEl = getElement(child);\n\n  switch (method) {\n    case RENDER_METHOD.APPEND: {\n      containerEl.append(childEl);\n      break;\n    }\n    case RENDER_METHOD.PREPEND: {\n      containerEl.prepend(childEl);\n      break;\n    }\n  }\n\n  renderChild(childEl, getChild(child, childEl));\n};\n\nconst renderChild = (container, childList) => {\n  if (childList) {\n    childList.forEach((childItem) => {\n      if (Array.isArray(childItem.element)) {\n        childItem.element.forEach((el) => render(container, el));\n      } else render(container, childItem);\n    });\n  }\n};\n\nconst getElement = (container) => {\n  let element = container;\n  if (element.structure) element = element.structure;\n  while (element.element) {\n    element = element.element;\n  }\n  return element;\n};\n\nconst getChild = (node, element) => {\n  let currentNode = node.structure ? node.structure : node.element;\n  let child = node.child ? node.child : undefined;\n  if (!child && currentNode) {\n    while (currentNode.child) {\n      if (currentNode.element === element) {\n        child = currentNode.child;\n        break;\n      }\n      currentNode = currentNode.child;\n    }\n  }\n  return child;\n};\n\nexport const createElement = (properties) => {\n  const newElement = Object.assign(\n    document.createElement(properties.tag),\n    properties,\n  );\n\n  return newElement;\n};\n\nexport const remove = (component) => {\n  if (component === null) {\n    return;\n  }\n\n  if (!(component instanceof Abstract)) {\n    throw new Error(`Can remove only components`);\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};\n","import { COMMAND } from \"../utils/const.js\";\nexport function deepCopy(matrix) {\n  return matrix.map((row) =>\n    row.map((cell) => (typeof cell === \"object\" ? deepCopy(cell) : cell)),\n  );\n}\n\nexport function getClearMatrix(lengthMatrix) {\n  return Array.from({ length: lengthMatrix }, () =>\n    Array(lengthMatrix).fill(\"\"),\n  );\n}\n\nexport function compareMatrix(matrix1, matrix2) {\n  const answers = matrix1.map((row) =>\n    row.map((cell) => (cell === \"0\" ? \"\" : cell)),\n  );\n  const playTable = matrix2.map((row) =>\n    row.map((cell) => (cell === \"0\" ? \"\" : cell)),\n  );\n  return JSON.stringify(answers) === JSON.stringify(playTable);\n}\n\nexport function getTime(seconds) {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n}\n\nexport function setAnswer(command) {\n  let answer;\n  switch (command) {\n    case COMMAND.FILL:\n      answer = \"1\";\n      break;\n    case COMMAND.EMPTY:\n      answer = \"\";\n      break;\n    case COMMAND.CROSS:\n      answer = \"0\";\n      break;\n  }\n  return answer;\n}\n","export default class Abstract {\n  constructor() {\n    if (new.target === Abstract) {\n      throw new Error(`Can't instantiate Abstract, only concrete one.`);\n    }\n    this.structure = null;\n    this.callback = {};\n  }\n\n  getElement() {\n    return this.structure[\"element\"];\n  }\n\n  removeElement() {\n    this.structure = null;\n    this.elements = null;\n  }\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Chose extends AbstractView {\n  #crossword;\n  #tagsProperties;\n\n  constructor(crossword) {\n    super();\n    this.#crossword = crossword;\n    this.#tagsProperties = this.#getElementProperties();\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n\n  setRandomClickHandler(callback) {\n    this.callback.randomClick = callback;\n    this.elements.random.a.addEventListener(`click`, this.#randomClickHandler);\n    return this;\n  }\n\n  setShowGalleryClickHandler(callback) {\n    this.callback.showGallery = callback;\n    this.elements.chose.wrap.addEventListener(\n      `click`,\n      this.#showGalleryClickHandler,\n    );\n    return this;\n  }\n\n  #getStructure() {\n    return {\n      element: this.elements.choseWrap,\n      child: [\n        {\n          element: this.elements.chose.wrap,\n          child: [\n            {\n              element: this.elements.chose.imgWrap,\n              child: [{ element: this.elements.chose.img }],\n            },\n            {\n              element: this.elements.chose.titleWrap,\n              child: [{ element: this.elements.chose.title }],\n            },\n            {\n              element: this.elements.chose.level.wrap,\n              child: Array.from(\n                { length: this.#crossword.level },\n                (el, i) => this.elements.chose.level[`star${i + 1}`],\n              ),\n            },\n          ],\n        },\n        {\n          element: this.elements.random.a,\n          child: [{ element: this.elements.random.img }],\n        },\n      ],\n    };\n  }\n\n  #getElementProperties() {\n    return {\n      choseWrap: {\n        tag: \"div\",\n        className: \"game__chose-wrapper\",\n      },\n      chose: {\n        wrap: { tag: \"div\", className: \"game__chose chose\" },\n        imgWrap: { tag: \"div\", className: \"chose__img-wrapper\" },\n        img: {\n          tag: \"img\",\n          className: \"chose__img\",\n          src: `./img/example/${this.#crossword.img}.png`,\n          alt: \"Chose the game\",\n          width: \"40\",\n          height: \"40\",\n        },\n        titleWrap: { tag: \"div\", className: \"chose__title-wrapper\" },\n        title: {\n          tag: \"p\",\n          className: \"chose__title\",\n          textContent: `${this.#crossword.name}`,\n        },\n        level: {\n          wrap: { tag: \"div\", className: \"chose__level-wrapper\" },\n          star: {\n            tag: \"img\",\n            className: \"chose__level-img\",\n            src: \"./img/icons/level.png\",\n            alt: \"star level\",\n            width: \"40\",\n            height: \"40\",\n          },\n        },\n      },\n      random: {\n        a: { tag: \"a\", className: \"game__random\", href: \"\" },\n        img: {\n          tag: \"img\",\n          className: \"game__random-img\",\n          src: \"./img/icons/random.png\",\n          alt: \"random game\",\n          width: \"40\",\n          height: \"40\",\n        },\n      },\n    };\n  }\n\n  #generateNode() {\n    const node = {\n      choseWrap: createElement(this.#tagsProperties.choseWrap),\n      chose: {\n        wrap: createElement(this.#tagsProperties.chose.wrap),\n        imgWrap: createElement(this.#tagsProperties.chose.imgWrap),\n        img: createElement(this.#tagsProperties.chose.img),\n        titleWrap: createElement(this.#tagsProperties.chose.titleWrap),\n        title: createElement(this.#tagsProperties.chose.title),\n        level: {\n          wrap: createElement(this.#tagsProperties.chose.level.wrap),\n        },\n      },\n      random: {\n        a: createElement(this.#tagsProperties.random.a),\n        img: createElement(this.#tagsProperties.random.img),\n      },\n    };\n\n    for (let i = 1; i <= this.#crossword.level; i += 1) {\n      node.chose.level[`star${i}`] = createElement(\n        this.#tagsProperties.chose.level.star,\n      );\n    }\n\n    return node;\n  }\n\n  #randomClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.randomClick();\n  };\n\n  #showGalleryClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.showGallery();\n  };\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Controls extends AbstractView {\n  #tagsProperties = this.#getElementProperties();\n  elements = this.#generateNode();\n  structure = this.#getStructure();\n\n  setSaveEnabled() {\n    this.elements.options.saveLoad.save.classList.remove(\"disable\");\n  }\n  setSaveDisabled() {\n    this.elements.options.saveLoad.save.classList.add(\"disable\");\n  }\n  setLoadEnable() {\n    this.elements.options.saveLoad.load.classList.remove(\"disable\");\n  }\n  setRefreshClickHandler(callback) {\n    this.callback.refreshClick = callback;\n    this.elements.options.refresh.a.addEventListener(\n      `click`,\n      this.#refreshClickHandler,\n    );\n    return this;\n  }\n  setShowAnswersClickHandler(callback) {\n    this.callback.showAnswers = callback;\n    this.elements.options.showAnswer.a.addEventListener(\n      `click`,\n      this.#showAnswersClickHandler,\n    );\n    return this;\n  }\n  setSaveClickHandler(callback) {\n    this.callback.saveClick = callback;\n    this.elements.options.saveLoad.save.addEventListener(\n      `click`,\n      this.#saveClickHandler,\n    );\n    return this;\n  }\n  setLoadClickHandler(callback) {\n    this.callback.loveClick = callback;\n    this.elements.options.saveLoad.load.addEventListener(\n      `click`,\n      this.#loadClickHandler,\n    );\n    return this;\n  }\n  setThemeClickHandler(callback) {\n    this.callback.themeClick = callback;\n    this.elements.settings.theme.input.addEventListener(\n      `click`,\n      this.#themeClickHandler,\n    );\n    return this;\n  }\n  setSoundClickHandler(callback) {\n    this.callback.soundClick = callback;\n    this.elements.settings.sound.input.addEventListener(\n      `click`,\n      this.#soundClickHandler,\n    );\n    return this;\n  }\n  #getStructure() {\n    return {\n      element: this.elements.header,\n      child: [\n        { element: this.elements.h1 },\n        {\n          element: this.elements.options.wrap,\n          child: [\n            {\n              element: this.elements.options.refresh.a,\n              child: [{ element: this.elements.options.refresh.img }],\n            },\n            {\n              element: this.elements.options.showAnswer.a,\n              child: [{ element: this.elements.options.showAnswer.img }],\n            },\n            {\n              element: this.elements.options.saveLoad.wrap,\n              child: [\n                {\n                  element: this.elements.options.saveLoad.save,\n                  child: [{ element: this.elements.options.saveLoad.saveImg }],\n                },\n                {\n                  element: this.elements.options.saveLoad.load,\n                  child: [{ element: this.elements.options.saveLoad.loadImg }],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          element: this.elements.settings.wrap,\n          child: [\n            {\n              element: this.elements.settings.sound.label,\n              child: [\n                { element: this.elements.settings.sound.input },\n                { element: this.elements.settings.sound.span },\n              ],\n            },\n            {\n              element: this.elements.settings.theme.label,\n              child: [\n                { element: this.elements.settings.theme.input },\n                { element: this.elements.settings.theme.span },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  }\n  #getElementProperties() {\n    return {\n      header: { tag: \"header\", className: \"game__control control\" },\n      h1: {\n        tag: \"h1\",\n        textContent: \"Nanograms game\",\n        className: \"visually-hidden\",\n      },\n      options: {\n        wrap: { tag: \"div\", className: \"control__options options\" },\n        refresh: {\n          a: { tag: \"a\", className: \"options__refresh\", href: \"\" },\n          img: {\n            tag: \"img\",\n            className: \"options__refresh-img\",\n            src: \"./img/icons/refresh.png\",\n            alt: \"refresh\",\n            width: \"40\",\n            height: \"40\",\n          },\n        },\n        showAnswer: {\n          a: { tag: \"a\", className: \"options__show-answer\", href: \"\" },\n          img: {\n            tag: \"img\",\n            className: \"options__show-answer-img\",\n            src: \"./img/icons/show-answers.png\",\n            alt: \"show-answer\",\n            width: \"40\",\n            height: \"40\",\n          },\n        },\n        saveLoad: {\n          wrap: { tag: \"div\", className: \"options__save-load\" },\n          save: { tag: \"a\", className: \"options__save disable\", href: \"\" },\n          saveImg: {\n            tag: \"img\",\n            className: \"options__save-img\",\n            src: \"./img/icons/save.png\",\n            alt: \"save game\",\n            width: \"40\",\n            height: \"40\",\n          },\n          load: { tag: \"a\", className: \"options__load disable\", href: \"\" },\n          loadImg: {\n            tag: \"img\",\n            className: \"options__load-img\",\n            src: \"./img/icons/open.png\",\n            alt: \"load last game\",\n            width: \"40\",\n            height: \"40\",\n          },\n        },\n      },\n      settings: {\n        wrap: { tag: \"div\", className: \"control__settings settings\" },\n        sound: {\n          label: {\n            tag: \"label\",\n            id: \"switch-sound\",\n            className: \"settings__sound sound\",\n          },\n          input: {\n            tag: \"input\",\n            className: \"sound__input\",\n            type: \"checkbox\",\n            id: \"slider-sound\",\n          },\n          span: { tag: \"span\", className: \"sound__slider round\" },\n        },\n        theme: {\n          label: {\n            tag: \"label\",\n            id: \"switch-theme\",\n            className: \"settings__theme theme\",\n          },\n          input: {\n            tag: \"input\",\n            className: \"theme__input\",\n            type: \"checkbox\",\n            id: \"slider-theme\",\n          },\n          span: { tag: \"span\", className: \"theme__slider round\" },\n        },\n      },\n    };\n  }\n  #generateNode() {\n    return {\n      header: createElement(this.#tagsProperties.header),\n      h1: createElement(this.#tagsProperties.h1),\n      options: {\n        wrap: createElement(this.#tagsProperties.options.wrap),\n        refresh: {\n          a: createElement(this.#tagsProperties.options.refresh.a),\n          img: createElement(this.#tagsProperties.options.refresh.img),\n        },\n        showAnswer: {\n          a: createElement(this.#tagsProperties.options.showAnswer.a),\n          img: createElement(this.#tagsProperties.options.showAnswer.img),\n        },\n        saveLoad: {\n          wrap: createElement(this.#tagsProperties.options.saveLoad.wrap),\n          save: createElement(this.#tagsProperties.options.saveLoad.save),\n          saveImg: createElement(this.#tagsProperties.options.saveLoad.saveImg),\n          load: createElement(this.#tagsProperties.options.saveLoad.load),\n          loadImg: createElement(this.#tagsProperties.options.saveLoad.loadImg),\n        },\n      },\n      settings: {\n        wrap: createElement(this.#tagsProperties.settings.wrap),\n        sound: {\n          label: createElement(this.#tagsProperties.settings.sound.label),\n          input: createElement(this.#tagsProperties.settings.sound.input),\n          span: createElement(this.#tagsProperties.settings.sound.span),\n        },\n        theme: {\n          label: createElement(this.#tagsProperties.settings.theme.label),\n          input: createElement(this.#tagsProperties.settings.theme.input),\n          span: createElement(this.#tagsProperties.settings.theme.span),\n        },\n      },\n    };\n  }\n  #refreshClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.refreshClick();\n  };\n  #showAnswersClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.showAnswers();\n  };\n  #saveClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.saveClick();\n  };\n  #loadClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.loveClick();\n  };\n  #themeClickHandler = () => {\n    this.callback.themeClick();\n  };\n  #soundClickHandler = () => {\n    this.callback.soundClick();\n  };\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\nimport { COMMAND } from \"../utils/const.js\";\n\nexport default class Crossword extends AbstractView {\n  #crossword;\n  #isGameStop;\n\n  constructor(crossword) {\n    super();\n    this.#crossword = crossword.playTable;\n    this.#isGameStop = false;\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n\n  stopGame() {\n    this.#isGameStop = true;\n  }\n  startGame() {\n    this.#isGameStop = false;\n  }\n\n  loadGame(crossword, answers) {\n    this.#crossword = crossword.playTable;\n    this.setAnswersCrossword(answers);\n  }\n  setClearCrossword() {\n    this.elements.rows.forEach((row) => {\n      row.cells.forEach((cell) => {\n        cell.td.classList.remove(\"fill\", \"cross\", \"hint--off\");\n      });\n    });\n  }\n\n  setAnswersCrossword(answer) {\n    this.elements.rows.forEach((row) => {\n      row.cells.forEach((cell) => {\n        cell.td.classList.remove(\"fill\", \"cross\", \"hint--off\");\n        if (\n          !(\n            cell.td.classList.contains(\"empty\") ||\n            cell.td.classList.contains(\"hint\")\n          )\n        ) {\n          const index = this.#getIndex(cell.td.data);\n          switch (answer[index.i][index.j]) {\n            case \"1\":\n              cell.td.classList.add(\"fill\");\n              break;\n            case \"0\":\n              cell.td.classList.add(\"cross\");\n              break;\n          }\n        }\n      });\n    });\n  }\n\n  setCellClickHandler(callback) {\n    this.callback.cellClick = callback;\n    this.getElement().addEventListener(`click`, this.#cellClickHandler);\n    this.getElement().addEventListener(\n      `contextmenu`,\n      this.#cellClickContextHandler,\n    );\n    return this;\n  }\n  #getStructure() {\n    const node = {\n      element: this.elements.table,\n      child: [],\n    };\n\n    this.elements.rows.forEach((rowEl) => {\n      const tdCells = [];\n      rowEl.cells.forEach((cellEl) => {\n        tdCells.push({ element: cellEl.td });\n      });\n\n      node.child.push({\n        element: rowEl.tr,\n        child: tdCells,\n      });\n    });\n\n    return node;\n  }\n\n  #generateNode() {\n    const hint = this.#generateHint(this.#crossword);\n\n    const node = {\n      table: createElement({\n        tag: \"table\",\n        className: \"game__crossword crossword\",\n      }),\n      rows: [],\n    };\n\n    let borderCounterTopBottom = 1;\n    for (let i = 0; i < hint.maxV; i += 1) {\n      const borderClassTop = borderCounterTopBottom === 1 ? \"border-top\" : \"\";\n      const borderClassBottom = i === hint.maxV - 1 ? \"border-bottom\" : \"\";\n      node.rows.push({\n        tr: createElement({ tag: \"tr\", className: `row` }),\n        cells: [],\n      });\n\n      for (let j = 0; j < hint.maxH; j += 1) {\n        node.rows[i].cells.push({\n          td: createElement({ tag: \"td\", className: \"empty\" }),\n        });\n      }\n\n      let borderCounterLeftRight = 1;\n      for (let j = 0; j < hint.vertical.length; j += 1) {\n        const borderClassLeft =\n          borderCounterLeftRight === 1 ? \"border-left\" : \"\";\n        const borderClassRight =\n          borderCounterLeftRight === 5 || j === hint.vertical.length - 1\n            ? \"border-right\"\n            : \"\";\n        node.rows[i].cells.push({\n          td: createElement({\n            tag: \"td\",\n            className: `cell hint ${borderClassTop} ${borderClassBottom} ${borderClassLeft} ${borderClassRight}`,\n            textContent: hint.vertical[j][i] ? hint.vertical[j][i] : \"\",\n          }),\n        });\n        borderCounterLeftRight += 1;\n        if (borderCounterLeftRight === 6) borderCounterLeftRight = 1;\n      }\n      borderCounterTopBottom += 1;\n    }\n\n    let borderCounterRow = 1;\n    for (let i = 0; i < this.#crossword.length; i += 1) {\n      const borderClassTop = borderCounterRow === 1 ? \"border-top\" : \"\";\n      const borderClassBottom =\n        borderCounterRow === 5 || i === this.#crossword.length - 1\n          ? \"border-bottom\"\n          : \"\";\n      node.rows.push({\n        tr: createElement({ tag: \"tr\", className: \"row\" }),\n        cells: [],\n      });\n      for (let j = 0; j < hint.maxH; j += 1) {\n        const borderClassLeft = j === 0 ? \"border-left\" : \"\";\n        const borderClassRight = j === hint.maxH - 1 ? \"border-right\" : \"\";\n        node.rows[i + hint.maxV].cells.push({\n          td: createElement({\n            tag: \"td\",\n            className: `cell hint ${borderClassRight} ${borderClassLeft} ${borderClassTop} ${borderClassBottom}`,\n            textContent: hint.horizontal[i][j] ? hint.horizontal[i][j] : \"\",\n          }),\n        });\n      }\n      let borderCounterCell = 1;\n      for (let j = 0; j < this.#crossword.length; j += 1) {\n        const borderClassCell =\n          borderCounterCell === 5 || j === this.#crossword.length - 1\n            ? \"border-right\"\n            : \"\";\n        const borderClassRow =\n          borderCounterRow === 5 || i === this.#crossword.length - 1\n            ? \"border-bottom\"\n            : \"\";\n        node.rows[i + hint.maxV].cells.push({\n          td: createElement({\n            tag: \"td\",\n            className: `cell ${borderClassCell} ${borderClassRow} ${borderClassBottom}`,\n            data: `el-${i}-${j}`,\n          }),\n        });\n        borderCounterCell += 1;\n        if (borderCounterCell === 6) borderCounterCell = 1;\n      }\n      borderCounterRow += 1;\n      if (borderCounterRow === 6) borderCounterRow = 1;\n    }\n\n    return node;\n  }\n\n  #generateHint(crossword) {\n    const rows = crossword.length;\n    const cols = crossword[0].length;\n\n    const horizontal = [];\n    const vertical = [];\n\n    for (let i = 0; i < rows; i += 1) {\n      let consistency = 0;\n      const rowHints = [];\n      for (let j = 0; j < cols; j += 1) {\n        if (crossword[i][j] === \"1\") consistency += 1;\n        if (crossword[i][j] === \"0\" && consistency > 0) {\n          rowHints.push(consistency);\n          consistency = 0;\n        }\n      }\n      if (consistency > 0) {\n        rowHints.push(consistency);\n      }\n      horizontal.push(rowHints);\n    }\n\n    for (let j = 0; j < cols; j += 1) {\n      let consistency = 0;\n      const colHints = [];\n\n      for (let i = 0; i < rows; i += 1) {\n        if (crossword[i][j] === \"1\") {\n          consistency += 1;\n        } else if (consistency > 0) {\n          colHints.push(consistency);\n          consistency = 0;\n        }\n      }\n\n      if (consistency > 0) {\n        colHints.push(consistency);\n      }\n\n      vertical.push(colHints);\n    }\n\n    const maxHorizontalLength = horizontal.reduce((max, row) => {\n      return Math.max(max, row.length);\n    }, 0);\n    const maxVerticalLength = vertical.reduce((max, col) => {\n      return Math.max(max, col.length);\n    }, 0);\n\n    const alignedHorizontalHints = horizontal.map((row) => {\n      const emptyEl = Array(maxHorizontalLength - row.length).fill(0);\n      return emptyEl.concat(row);\n    });\n\n    const alignedVerticalHints = vertical.map((cell) => {\n      const emptyEl = Array(maxVerticalLength - cell.length).fill(0);\n      return emptyEl.concat(cell);\n    });\n\n    return {\n      maxH: maxHorizontalLength,\n      maxV: maxVerticalLength,\n      horizontal: alignedHorizontalHints,\n      vertical: alignedVerticalHints,\n    };\n  }\n\n  #cellClickHandler = (evt) => {\n    if (this.#isGameStop) {\n      return;\n    }\n    if (!evt.target.classList.contains(\"cell\")) {\n      return;\n    }\n    if (evt.target.classList.contains(\"hint\")) {\n      if (evt.target.classList.contains(\"hint--off\"))\n        evt.target.classList.remove(\"hint--off\");\n      else evt.target.classList.add(\"hint--off\");\n    } else {\n      let command = \"\";\n      if (evt.target.classList.contains(\"cross\"))\n        evt.target.classList.remove(\"cross\");\n      if (evt.target.classList.contains(\"fill\")) {\n        evt.target.classList.remove(\"fill\");\n        command = COMMAND.EMPTY;\n      } else {\n        evt.target.classList.add(\"fill\");\n        command = COMMAND.FILL;\n      }\n\n      const indexEl = this.#getIndex(evt.target.data);\n      this.callback.cellClick(indexEl, command);\n    }\n\n    evt.preventDefault();\n  };\n\n  #cellClickContextHandler = (evt) => {\n    if (this.#isGameStop) {\n      return;\n    }\n    evt.preventDefault();\n    if (!evt.target.classList.contains(\"cell\")) {\n      return;\n    }\n    if (!evt.target.classList.contains(\"hint\")) {\n      if (evt.target.classList.contains(\"fill\"))\n        evt.target.classList.remove(\"fill\");\n\n      let command = \"\";\n      if (evt.target.classList.contains(\"cross\")) {\n        evt.target.classList.remove(\"cross\");\n        command = COMMAND.EMPTY;\n      } else {\n        evt.target.classList.add(\"cross\");\n        command = COMMAND.CROSS;\n      }\n\n      const indexEl = this.#getIndex(evt.target.data);\n      this.callback.cellClick(indexEl, command);\n    }\n  };\n\n  #getIndex(data) {\n    const indexArr = data.split(\"-\");\n    const index = {\n      i: indexArr[1],\n      j: indexArr[2],\n    };\n    return index;\n  }\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Gallery extends AbstractView {\n  #crosswords;\n  #tagsProperties;\n\n  constructor(crosswords) {\n    super();\n    this.#crosswords = crosswords;\n    this.#tagsProperties = this.#getElementProperties();\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n\n  setCloseClickHandler(callback) {\n    this.callback.closeClick = callback;\n    this.elements.closeBtn.addEventListener(`click`, this.#closeClickHandler);\n    return this;\n  }\n\n  setGameClickHandler(callback) {\n    this.callback.gameClick = callback;\n    this.elements.gallery.forEach((game) => {\n      game.exWrap.addEventListener(`click`, this.#gameClickHandler);\n    });\n    return this;\n  }\n  #getStructure() {\n    const nodeList = [];\n    this.elements.gallery.forEach((elNode) => {\n      const newNode = {\n        element: elNode.exWrap,\n        child: [\n          { element: elNode.exImg },\n          { element: elNode.exName },\n          {\n            element: elNode.level.wrap,\n            child: Array.from(\n              { length: Number(elNode.level.levelNumber) },\n              (el, i) => elNode.level[`star${i + 1}`],\n            ),\n          },\n        ],\n      };\n\n      nodeList.push(newNode);\n    });\n\n    const node = {\n      element: this.elements.aside,\n      child: [\n        {\n          element: this.elements.window,\n          child: [\n            {\n              element: this.elements.windowWrap,\n              child: [\n                {\n                  element: this.elements.titleWrap,\n                  child: [\n                    { element: this.elements.title },\n                    {\n                      element: this.elements.closeBtn,\n                      child: [{ element: this.elements.closeImg }],\n                    },\n                  ],\n                },\n                { element: this.elements.galleryWrap, child: nodeList },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n\n    return node;\n  }\n  #getElementProperties() {\n    return {\n      aside: { tag: \"aside\", className: \"modal-gallery\" },\n      window: { tag: \"div\", className: \"modal-gallery__window\" },\n      windowWrap: { tag: \"div\", className: \"modal-gallery__wrapper\" },\n      titleWrap: { tag: \"div\", className: \"modal-gallery__title-wrap\" },\n      title: {\n        tag: \"h2\",\n        className: \"modal-gallery__title\",\n        textContent: `Gallery`,\n      },\n      closeBtn: { tag: \"a\", className: \"modal-gallery__button\" },\n      closeImg: {\n        tag: \"img\",\n        className: \"modal-gallery__button-img\",\n        src: \"./img/icons/close.png\",\n        alt: \"Close window\",\n        width: \"40\",\n        height: \"40\",\n      },\n      galleryWrap: { tag: \"div\", className: \"modal-gallery__gallery-wrap\" },\n      levelWrap: { tag: \"div\", className: \"modal-gallery__level-wrapper\" },\n      star: {\n        tag: \"img\",\n        className: \"modal-gallery__level-img\",\n        src: \"./img/icons/level.png\",\n        alt: \"star level\",\n        width: \"40\",\n        height: \"40\",\n      },\n    };\n  }\n  #generateNode() {\n    const node = {\n      aside: createElement(this.#tagsProperties.aside),\n      window: createElement(this.#tagsProperties.window),\n      windowWrap: createElement(this.#tagsProperties.windowWrap),\n      titleWrap: createElement(this.#tagsProperties.titleWrap),\n      title: createElement(this.#tagsProperties.title),\n      closeBtn: createElement(this.#tagsProperties.closeBtn),\n      closeImg: createElement(this.#tagsProperties.closeImg),\n      galleryWrap: createElement(this.#tagsProperties.galleryWrap),\n      gallery: [],\n    };\n\n    this.#crosswords.forEach((element) => {\n      const newNode = {\n        exWrap: createElement({\n          tag: \"div\",\n          className: \"modal-gallery__example-wrap\",\n          data: `${element.id}`,\n        }),\n        exImg: createElement({\n          tag: \"img\",\n          className: \"modal-gallery__example-img\",\n          src: `./img/example/${element.img}.png`,\n          alt: `${element.name}`,\n          width: \"40\",\n          height: \"40\",\n        }),\n        exName: createElement({\n          tag: \"p\",\n          className: \"modal-gallery__example-name\",\n          textContent: `${element.name}`,\n        }),\n        level: {\n          wrap: createElement(this.#tagsProperties.levelWrap),\n          levelNumber: element.level,\n        },\n      };\n\n      for (let i = 1; i <= element.level; i += 1) {\n        newNode.level[`star${i}`] = createElement(this.#tagsProperties.star);\n      }\n\n      node.gallery.push(newNode);\n    });\n\n    return node;\n  }\n\n  #closeClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.closeClick();\n  };\n\n  #gameClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.gameClick(evt.currentTarget.data);\n  };\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Main extends AbstractView {\n  #tagsProperties;\n\n  constructor() {\n    super();\n    this.#tagsProperties = this.#getElementProperties();\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n  #getStructure() {\n    return {\n      element: this.elements.main,\n      child: [\n        {\n          element: this.elements.table.section,\n          child: [\n            { element: this.elements.table.h2 },\n            { element: this.elements.table.crosswordWrap },\n          ],\n        },\n        {\n          element: this.elements.additional.section,\n          child: [{ element: this.elements.additional.h2 }],\n        },\n      ],\n    };\n  }\n  #getElementProperties() {\n    return {\n      main: {\n        tag: \"main\",\n        className: \"game__wrapper\",\n      },\n      table: {\n        section: {\n          tag: \"section\",\n          className: \"game__table table\",\n        },\n        h2: {\n          tag: \"h2\",\n          className: \"visually-hidden\",\n          textContent: \"Game table\",\n        },\n        crosswordWrap: {\n          tag: \"div\",\n          className: \"game__crossword-wrapper\",\n        },\n      },\n      additional: {\n        section: {\n          tag: \"section\",\n          className: \"game__additional\",\n        },\n        h2: {\n          tag: \"h2\",\n          className: \"visually-hidden\",\n          textContent: \"Additional information\",\n        },\n      },\n    };\n  }\n  #generateNode() {\n    return {\n      main: createElement(this.#tagsProperties.main),\n      table: {\n        section: createElement(this.#tagsProperties.table.section),\n        h2: createElement(this.#tagsProperties.table.h2),\n        crosswordWrap: createElement(this.#tagsProperties.table.crosswordWrap),\n      },\n      additional: {\n        section: createElement(this.#tagsProperties.additional.section),\n        h2: createElement(this.#tagsProperties.additional.h2),\n      },\n    };\n  }\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\nimport { getTime } from \"../utils/utils.js\";\nimport CrosswordModel from \"../model/crossword.js\";\n\nexport default class Results extends AbstractView {\n  #results;\n  #crosswords;\n  #tagsProperties;\n\n  constructor(results, crosswords) {\n    super();\n    if (results) {\n      this.#results = results.slice().sort(function (a, b) {\n        if (a.time > b.time) {\n          return 1;\n        }\n        if (a.time < b.time) {\n          return -1;\n        }\n        return 0;\n      });\n    } else this.#results = [];\n\n    this.#crosswords = new CrosswordModel();\n    this.#crosswords.setCrosswords(crosswords);\n    this.#tagsProperties = this.#getElementProperties();\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n  #getStructure() {\n    const node = {\n      element: this.elements.resultsWrap,\n      child: [\n        {\n          element: this.elements.titleWrap,\n          child: [\n            { element: this.elements.img },\n            { element: this.elements.titleP },\n          ],\n        },\n      ],\n    };\n    this.elements.results.forEach((elNode) => {\n      const newNode = {\n        element: elNode.wrapInf,\n        child: [\n          { element: elNode.resultWrap, child: [{ element: elNode.p }] },\n          {\n            element: elNode.level.wrap,\n            child: Array.from(\n              { length: Number(elNode.level.levelNumber) },\n              (el, i) => elNode.level[`star${i + 1}`],\n            ),\n          },\n        ],\n      };\n\n      node.child.push(newNode);\n    });\n\n    return node;\n  }\n  #getElementProperties() {\n    const node = {\n      resultsWrap: { tag: \"div\", className: \"game__results results\" },\n      titleWrap: { tag: \"div\", className: \"results__title-wrapper\" },\n      img: {\n        tag: \"img\",\n        className: \"results__img\",\n        src: \"./img/icons/results.png\",\n        alt: \"Results table\",\n        width: \"40\",\n        height: \"40\",\n      },\n      titleP: { tag: \"p\", className: \"results__title\", textContent: \"Results\" },\n      wrapInf: { tag: \"div\", className: \"results__information-wrapper\" },\n      resultWrap: { tag: \"div\", className: \"results__result-wrapper\" },\n      level: {\n        wrap: { tag: \"div\", className: \"results__level-wrapper\" },\n        star: {\n          tag: \"img\",\n          className: \"results__level-img\",\n          src: \"./img/icons/level.png\",\n          alt: \"star level\",\n          width: \"40\",\n          height: \"40\",\n        },\n      },\n    };\n    return node;\n  }\n  #generateNode() {\n    const node = {\n      resultsWrap: createElement(this.#tagsProperties.resultsWrap),\n      titleWrap: createElement(this.#tagsProperties.titleWrap),\n      img: createElement(this.#tagsProperties.img),\n      titleP: createElement(this.#tagsProperties.titleP),\n\n      results: [],\n    };\n\n    this.#results.forEach((result) => {\n      const cross = this.#crosswords.getCrosswordById(result.id);\n      const newResultNode = {\n        wrapInf: createElement(this.#tagsProperties.wrapInf),\n        resultWrap: createElement(this.#tagsProperties.resultWrap),\n        p: createElement({\n          tag: \"p\",\n          className: \"results__information\",\n          textContent: `${getTime(result.time)} - ${cross.name}`,\n        }),\n        level: {\n          wrap: createElement(this.#tagsProperties.level.wrap),\n          levelNumber: cross.level,\n        },\n      };\n\n      for (let i = 1; i <= cross.level; i += 1) {\n        newResultNode.level[`star${i}`] = createElement(\n          this.#tagsProperties.level.star,\n        );\n      }\n      node.results.push(newResultNode);\n    });\n    return node;\n  }\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class Timer extends AbstractView {\n  #tagsProperties = this.#getElementProperties();\n  elements = this.#generateNode();\n  structure = this.#getStructure();\n\n  updateTimerDisplay(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    this.elements.time.textContent = `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  }\n\n  #getStructure() {\n    return {\n      element: this.elements.wrap,\n      child: [\n        {\n          element: this.elements.imgWrap,\n          child: [{ element: this.elements.img }],\n        },\n        {\n          element: this.elements.timeWrap,\n          child: [{ element: this.elements.time }],\n        },\n      ],\n    };\n  }\n\n  #getElementProperties() {\n    return {\n      wrap: { tag: \"div\", className: \"options__timer timer\" },\n      imgWrap: { tag: \"div\", className: \"timer__img-wrapper\" },\n      img: {\n        tag: \"img\",\n        className: \"timer__img\",\n        src: \"./img/icons/timer.png\",\n        alt: \"timer\",\n        width: \"40\",\n        height: \"40\",\n      },\n      timeWrap: { tag: \"div\", className: \"timer__time-wrapper\" },\n      time: { tag: \"p\", className: \"timer__time\", textContent: \"0:00\" },\n    };\n  }\n\n  #generateNode() {\n    return {\n      wrap: createElement(this.#tagsProperties.wrap),\n      imgWrap: createElement(this.#tagsProperties.imgWrap),\n      img: createElement(this.#tagsProperties.img),\n      timeWrap: createElement(this.#tagsProperties.timeWrap),\n      time: createElement(this.#tagsProperties.time),\n    };\n  }\n}\n","import AbstractView from \"./abstract.js\";\nimport { createElement } from \"../utils/render.js\";\n\nexport default class EndWin extends AbstractView {\n  #time;\n  #tagsProperties;\n\n  constructor(time) {\n    super();\n    this.#time = time;\n    this.#tagsProperties = this.#getElementProperties();\n    this.elements = this.#generateNode();\n    this.structure = this.#getStructure();\n  }\n  setPlayAgainClickHandler(callback) {\n    this.callback.playAgainClick = callback;\n    this.elements.closeBtn.addEventListener(\n      `click`,\n      this.#playAgainClickHandler,\n    );\n  }\n  #getStructure() {\n    return {\n      element: this.elements.aside,\n      child: [\n        {\n          element: this.elements.window,\n          child: [\n            {\n              element: this.elements.div,\n              child: [\n                {\n                  element: this.elements.titleWrap,\n                  child: [\n                    { element: this.elements.img },\n                    { element: this.elements.title },\n                  ],\n                },\n                { element: this.elements.information },\n                {\n                  element: this.elements.closeBtn,\n                  child: [{ element: this.elements.closeImg }],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  }\n  #getElementProperties() {\n    return {\n      aside: { tag: \"aside\", className: \"modal-results\" },\n      window: { tag: \"div\", className: \"modal-results__window\" },\n      div: { tag: \"div\", className: \"modal-results__wrapper\" },\n      titleWrap: { tag: \"div\", className: \"modal-results__title-wrap\" },\n      title: {\n        tag: \"h2\",\n        className: \"modal-results__title\",\n        textContent: `Great! `,\n      },\n      img: {\n        tag: \"img\",\n        className: \"modal-results__img\",\n        src: \"./img/icons/results.png\",\n        alt: `Winner's medal`,\n        width: \"40\",\n        height: \"40\",\n      },\n      information: {\n        tag: \"p\",\n        className: \"modal-results__information\",\n        textContent: `You have solved the nanograms in ${this.#time} seconds!`,\n      },\n      closeBtn: { tag: \"a\", className: \"modal-results__button\" },\n      closeImg: {\n        tag: \"img\",\n        className: \"modal-results__button-img\",\n        src: \"./img/icons/win.png\",\n        alt: \"Close window\",\n        width: \"40\",\n        height: \"40\",\n      },\n    };\n  }\n  #generateNode() {\n    return {\n      aside: createElement(this.#tagsProperties.aside),\n      window: createElement(this.#tagsProperties.window),\n      div: createElement(this.#tagsProperties.div),\n      titleWrap: createElement(this.#tagsProperties.titleWrap),\n      title: createElement(this.#tagsProperties.title),\n      img: createElement(this.#tagsProperties.img),\n      information: createElement(this.#tagsProperties.information),\n      closeBtn: createElement(this.#tagsProperties.closeBtn),\n      closeImg: createElement(this.#tagsProperties.closeImg),\n    };\n  }\n\n  #playAgainClickHandler = (evt) => {\n    evt.preventDefault();\n    this.callback.playAgainClick();\n  };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./scss/main.scss\";\nimport mockFile from \"./mock/mock.json\";\nimport CrosswordModel from \"./js/model/crossword.js\";\nimport NanogramsPresenter from \"./js/presenter/nanograms.js\";\n\nconst siteBodyElement = document.body;\n\nif (siteBodyElement !== null) {\n  const crosswordModel = new CrosswordModel();\n  const crosswords = mockFile.map(crosswordModel.adaptToClient);\n  crosswordModel.setCrosswords(crosswords);\n\n  const nanogramsPresenter = new NanogramsPresenter(\n    siteBodyElement,\n    crosswordModel.getCrosswords(),\n  );\n\n  const props = { isReset: true, isFirstStart: true };\n  nanogramsPresenter.startGame(props);\n}\n"],"names":[],"sourceRoot":""}